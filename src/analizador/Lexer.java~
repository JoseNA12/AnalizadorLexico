/* The following code was generated by JFlex 1.6.1 */

package analizador;
import jdk.nashorn.internal.ir.LiteralNode;import static analizador.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/greiv/Documents/GitHub/AnalizadorLexico/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\24\1\25\1\24\1\24\22\0\1\4\1\5\1\61"+
    "\1\62\3\5\1\0\1\20\1\21\1\6\1\7\1\13\1\10\1\14"+
    "\1\11\12\3\1\15\1\13\1\16\1\12\1\17\1\5\1\0\1\33"+
    "\1\40\1\1\1\35\1\30\1\32\1\41\1\50\1\43\1\2\1\57"+
    "\1\44\1\54\1\34\1\31\1\55\1\2\1\36\1\47\1\45\1\53"+
    "\1\51\1\52\1\60\1\37\1\2\1\22\1\0\1\23\1\0\1\2"+
    "\1\0\1\33\1\40\1\1\1\35\1\30\1\32\1\41\1\50\1\43"+
    "\1\2\1\57\1\44\1\54\1\34\1\31\1\55\1\2\1\36\1\47"+
    "\1\45\1\53\1\51\1\52\1\60\1\37\1\2\1\26\1\0\1\27"+
    "\7\0\1\25\33\0\1\5\37\0\1\5\7\0\1\5\3\0\1\5"+
    "\3\0\1\5\1\0\1\5\6\0\1\5\6\0\1\5\7\0\1\5"+
    "\3\0\1\5\3\0\1\5\1\0\1\5\6\0\1\5\65\0\2\42"+
    "\115\0\1\46\u1ea8\0\1\25\1\25\u0100\0\1\56\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\3\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\1\11\2\1\1\3\2\1\1\7\2\2\1"+
    "\1\2\1\21\3\2\1\21\1\3\1\0\1\22\1\23"+
    "\1\24\1\25\1\26\1\4\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\3\0\1\4\1\2\1\35\2\2\1\0"+
    "\4\2\1\0\1\2\1\35\1\0\6\2\3\35\5\2"+
    "\3\0\4\2\1\0\5\2\2\0\1\2\1\21\1\2"+
    "\1\0\2\2\1\0\1\36\1\0\1\37\1\0\1\40"+
    "\3\0\2\35\12\2\1\0\4\2\2\0\2\2\1\0"+
    "\1\2\1\0\5\2\2\41\1\2\1\21\1\2\1\35"+
    "\1\36\2\0\1\30\3\0\1\3\7\2\1\0\2\2"+
    "\1\0\3\2\2\0\2\2\1\0\4\2\1\21\1\35"+
    "\1\30\1\36\2\0\7\2\1\0\1\2\2\0\2\2"+
    "\1\0\3\2\1\21\1\0\1\2\1\0\1\2\1\35"+
    "\6\2\1\21\1\35\4\2\1\21\1\35\2\2\1\21"+
    "\1\35\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21\1\2"+
    "\1\21\1\2\1\21\1\2\1\21\1\2\1\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[476];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\63\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\63\0\63\0\u01cb\0\u01fe\0\u0231\0\u0264"+
    "\0\u0297\0\63\0\63\0\63\0\u02ca\0\u02fd\0\u0330\0\u0363"+
    "\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb"+
    "\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693"+
    "\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b"+
    "\0\u085e\0\u0891\0\u08c4\0\u08f7\0\63\0\63\0\63\0\63"+
    "\0\63\0\u092a\0\63\0\u095d\0\63\0\u0990\0\63\0\u09c3"+
    "\0\u09f6\0\u0a29\0\u0a5c\0\u0a5c\0\u0a8f\0\u0792\0\u0ac2\0\u0af5"+
    "\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d"+
    "\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\63"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122"+
    "\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba"+
    "\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\63"+
    "\0\u1452\0\63\0\u1485\0\u14b8\0\u14eb\0\u1287\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9"+
    "\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881"+
    "\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19"+
    "\0\u1a4c\0\u1a7f\0\u1221\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1ae5"+
    "\0\u1b7e\0\u1bb1\0\u1be4\0\u1ab2\0\u1ab2\0\u1c17\0\u1c4a\0\63"+
    "\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2"+
    "\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a"+
    "\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112"+
    "\0\u20df\0\u2145\0\u2178\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244"+
    "\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc"+
    "\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574"+
    "\0\u25a7\0\u25da\0\u260d\0\u250e\0\u2640\0\u2673\0\u26a6\0\u26d9"+
    "\0\u270c\0\u273f\0\u2772\0\u273f\0\u27a5\0\u27d8\0\u280b\0\u283e"+
    "\0\u2871\0\u283e\0\u28a4\0\u28d7\0\u290a\0\u28d7\0\u293d\0\u2970"+
    "\0\u29a3\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08"+
    "\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0"+
    "\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38"+
    "\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0"+
    "\0\u3003\0\u3036\0\u3069\0\u309c\0\u30cf\0\u3102\0\u3135\0\u3168"+
    "\0\u319b\0\u31ce\0\u3201\0\u3234\0\u3267\0\u329a\0\u32cd\0\u3300"+
    "\0\u3333\0\u3366\0\u3399\0\u33cc\0\u33ff\0\u3432\0\u3465\0\u3498"+
    "\0\u34cb\0\u34fe\0\u3531\0\u3564\0\u3597\0\u35ca\0\u35fd\0\u3630"+
    "\0\u3663\0\u3696\0\u36c9\0\u36fc\0\u372f\0\u3762\0\u3795\0\u37c8"+
    "\0\u37fb\0\u382e\0\u3861\0\u3894\0\u38c7\0\u38fa\0\u392d\0\u3960"+
    "\0\u3993\0\u39c6\0\u39f9\0\u3a2c\0\u3a5f\0\u3a92\0\u3ac5\0\u3af8"+
    "\0\u3b2b\0\u3b5e\0\u3b91\0\u3bc4\0\u3bf7\0\u3c2a\0\u3c5d\0\u3c90"+
    "\0\u3cc3\0\u3cf6\0\u3d29\0\u3d5c\0\u3d8f\0\u3dc2\0\u3df5\0\u3e28"+
    "\0\u3e5b\0\u3e8e\0\u3ec1\0\u3ef4\0\u3f27\0\u3f5a\0\u3f8d\0\u3fc0"+
    "\0\u3ff3\0\u4026\0\u4059\0\u408c\0\u40bf\0\u40f2\0\u4125\0\u4158"+
    "\0\u418b\0\u41be\0\u41f1\0\u4224\0\u4257\0\u428a\0\u42bd\0\u42f0"+
    "\0\u4323\0\u4356\0\u4389\0\u43bc\0\u43ef\0\u4422\0\u4455\0\u4488"+
    "\0\u44bb\0\u44ee\0\u4521\0\u4554\0\u4587\0\u45ba\0\u45ed\0\u4620"+
    "\0\u4653\0\u4686\0\u46b9\0\u46ec\0\u471f\0\u4752\0\u4785\0\u47b8"+
    "\0\u47eb\0\u481e\0\u4851\0\u4884\0\u48b7\0\u48ea\0\u491d\0\u4950"+
    "\0\u4983\0\u49b6\0\u49e9\0\u4a1c\0\u4a4f\0\u4a82\0\u4ab5\0\u4ae8"+
    "\0\u4b1b\0\u4b4e\0\u4b81\0\u4bb4\0\u4be7\0\u4c1a\0\u4c4d\0\u4c80"+
    "\0\u4cb3\0\u4ce6\0\u4d19\0\u4d4c\0\u4d7f\0\u4db2\0\u4de5\0\u4e18"+
    "\0\u4e4b\0\u4e7e\0\u4eb1\0\u4ee4\0\u4f17\0\u4f4a\0\u4f7d\0\u4fb0"+
    "\0\u4fe3\0\u5016\0\u5049\0\u507c\0\u50af\0\u50e2\0\u5115\0\u5148"+
    "\0\u517b\0\u51ae\0\u51e1\0\u5214\0\u5247\0\u527a\0\u52ad\0\u52e0"+
    "\0\u5313\0\u5346\0\u5379\0\u53ac\0\u53df\0\u5412\0\u5445\0\u5478"+
    "\0\u54ab\0\u54de\0\u5511\0\u5544\0\u5577\0\u55aa\0\u55dd\0\u5610"+
    "\0\u5643\0\u5676\0\u56a9\0\u56dc\0\u570f\0\u5742\0\u5775\0\u57a8"+
    "\0\u57db\0\u580e\0\63\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[476];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\6\1\0\1\25\1\2"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\4"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\4\1\45\1\46\1\47\1\50\1\51\1\2\1\4"+
    "\1\52\1\53\1\54\64\0\3\55\1\0\1\56\20\0"+
    "\2\56\1\55\1\57\1\55\1\60\6\55\1\0\3\55"+
    "\1\0\1\55\1\61\5\55\1\0\2\55\1\0\1\56"+
    "\1\0\3\55\1\0\1\56\20\0\2\56\12\55\1\0"+
    "\3\55\1\0\7\55\1\0\2\55\1\0\1\56\1\0"+
    "\2\62\1\63\10\0\1\64\13\0\12\62\1\0\3\62"+
    "\1\0\7\62\1\0\2\62\14\0\1\65\57\0\1\66"+
    "\2\0\1\67\60\0\1\70\1\0\1\71\61\0\1\72"+
    "\1\73\53\0\1\74\71\0\1\13\62\0\1\75\3\0"+
    "\1\76\1\14\55\0\1\77\4\0\1\100\51\0\1\101"+
    "\1\0\1\102\52\0\6\103\1\0\20\103\1\104\33\103"+
    "\1\0\3\55\1\0\1\56\20\0\2\56\4\55\1\105"+
    "\5\55\1\0\1\55\1\60\1\55\1\0\7\55\1\0"+
    "\2\55\1\0\1\56\1\0\3\55\1\0\1\56\20\0"+
    "\2\56\2\55\1\106\3\55\1\106\3\55\1\0\3\55"+
    "\1\0\7\55\1\0\2\55\1\0\1\56\1\0\3\55"+
    "\1\0\1\56\20\0\2\56\1\55\1\107\1\55\1\110"+
    "\6\55\1\111\1\112\2\55\1\0\4\55\1\113\2\55"+
    "\1\0\2\55\1\0\1\56\1\0\3\55\1\0\1\56"+
    "\20\0\2\56\4\55\1\105\1\55\1\114\3\55\1\0"+
    "\3\55\1\0\7\55\1\0\2\55\1\0\1\56\1\0"+
    "\3\55\1\0\1\56\20\0\2\56\1\55\1\115\10\55"+
    "\1\116\1\117\2\55\1\0\7\55\1\0\2\55\1\0"+
    "\1\56\1\0\3\55\1\0\1\56\20\0\2\56\1\55"+
    "\1\120\10\55\1\121\1\122\2\55\1\0\7\55\1\0"+
    "\2\55\1\0\1\56\1\0\3\55\1\0\1\56\20\0"+
    "\2\56\1\123\11\55\1\0\3\55\1\0\7\55\1\0"+
    "\2\55\1\0\1\56\1\0\3\55\1\0\1\56\20\0"+
    "\2\56\1\124\1\125\5\55\1\126\2\55\1\0\3\55"+
    "\1\0\7\55\1\0\2\55\1\0\1\56\1\0\3\55"+
    "\1\0\1\56\20\0\2\56\1\55\1\127\10\55\1\0"+
    "\3\55\1\0\7\55\1\0\2\55\1\0\1\56\32\0"+
    "\1\130\1\0\1\131\27\0\3\55\1\0\1\56\20\0"+
    "\2\56\2\55\1\106\1\55\1\132\5\55\1\0\3\55"+
    "\1\0\7\55\1\0\2\55\1\0\1\56\1\0\3\55"+
    "\1\0\1\56\20\0\2\56\1\55\1\133\1\55\1\134"+
    "\6\55\1\0\3\55\1\0\7\55\1\0\2\55\1\0"+
    "\1\56\1\0\3\55\1\0\1\56\20\0\2\56\1\55"+
    "\1\106\4\55\1\135\1\136\2\55\1\0\3\55\1\0"+
    "\1\55\1\137\5\55\1\0\2\55\1\0\1\56\30\0"+
    "\1\140\14\0\1\141\2\0\1\142\13\0\3\55\1\0"+
    "\1\56\20\0\2\56\1\115\11\55\1\0\2\55\1\143"+
    "\1\0\1\55\1\144\5\55\1\0\2\55\1\0\1\56"+
    "\1\0\3\55\1\0\1\56\20\0\2\56\3\55\1\145"+
    "\6\55\1\0\3\55\1\0\7\55\1\0\2\55\1\0"+
    "\1\56\1\0\3\55\1\0\1\56\20\0\2\56\6\55"+
    "\1\146\3\55\1\147\1\150\2\55\1\0\1\55\1\151"+
    "\5\55\1\0\2\55\1\0\1\56\1\0\3\55\1\0"+
    "\1\56\20\0\2\56\4\55\1\152\5\55\1\0\3\55"+
    "\1\0\7\55\1\0\2\55\1\0\1\56\1\0\3\55"+
    "\1\0\1\56\20\0\2\56\1\55\1\105\10\55\1\0"+
    "\3\55\1\0\7\55\1\0\2\55\1\0\1\56\1\0"+
    "\3\55\1\0\1\56\20\0\2\56\3\55\1\153\2\55"+
    "\1\154\3\55\1\0\3\55\1\0\7\55\1\0\2\55"+
    "\1\0\1\56\1\0\3\55\1\0\1\56\20\0\2\56"+
    "\1\55\1\145\10\55\1\0\3\55\1\0\7\55\1\0"+
    "\2\55\1\0\1\56\6\155\1\0\54\155\3\0\1\156"+
    "\60\0\3\157\1\0\1\160\20\0\2\160\12\157\1\0"+
    "\3\157\1\0\7\157\1\0\2\157\1\0\1\160\1\0"+
    "\3\160\1\0\1\160\20\0\14\160\1\0\3\160\1\0"+
    "\7\160\1\0\2\160\1\0\1\160\1\0\3\157\1\0"+
    "\1\160\20\0\2\160\4\157\1\161\5\157\1\0\3\157"+
    "\1\0\7\157\1\0\2\157\1\0\1\160\1\0\3\157"+
    "\1\0\1\160\20\0\2\160\12\157\1\0\3\157\1\162"+
    "\1\163\6\157\1\0\2\157\1\0\1\160\1\0\3\157"+
    "\1\0\1\160\20\0\2\160\3\157\1\164\6\157\1\0"+
    "\3\157\1\0\7\157\1\0\2\157\1\0\1\160\1\0"+
    "\3\56\1\0\1\56\20\0\14\56\1\0\3\56\1\0"+
    "\7\56\1\0\2\56\1\0\1\56\1\0\2\62\1\63"+
    "\10\0\1\165\13\0\12\62\1\0\3\62\1\0\7\62"+
    "\1\0\2\62\5\0\1\166\57\0\24\72\2\0\35\72"+
    "\3\0\1\74\24\0\1\167\44\0\1\170\15\0\1\171"+
    "\44\0\1\172\50\0\6\173\1\174\54\173\3\0\1\175"+
    "\57\0\27\103\1\6\33\103\1\0\3\157\1\0\1\160"+
    "\20\0\2\160\5\157\1\176\4\157\1\0\3\157\1\0"+
    "\7\157\1\0\2\157\1\0\1\160\1\0\3\157\1\0"+
    "\1\160\20\0\2\160\6\157\1\177\3\157\1\0\3\157"+
    "\1\0\7\157\1\0\2\157\1\0\1\160\1\0\3\157"+
    "\1\0\1\160\20\0\2\160\12\157\1\0\1\157\1\200"+
    "\1\157\1\0\7\157\1\0\2\157\1\0\1\160\44\0"+
    "\1\162\17\0\3\157\1\0\1\160\20\0\2\160\12\157"+
    "\1\0\1\157\1\163\1\157\1\0\7\157\1\0\2\157"+
    "\1\0\1\160\1\0\3\157\1\0\1\160\20\0\2\160"+
    "\4\157\1\201\5\157\1\0\3\157\1\0\7\157\1\0"+
    "\2\157\1\0\1\160\1\0\3\157\1\0\1\160\20\0"+
    "\2\160\6\157\1\202\3\157\1\0\3\157\1\0\7\157"+
    "\1\0\2\157\1\0\1\160\1\0\3\157\1\0\1\160"+
    "\20\0\2\160\12\157\1\0\2\157\1\176\1\0\7\157"+
    "\1\0\2\157\1\0\1\160\44\0\1\130\17\0\3\157"+
    "\1\0\1\160\20\0\2\160\12\157\1\0\1\157\1\176"+
    "\1\157\1\0\7\157\1\0\2\157\1\0\1\160\1\0"+
    "\3\157\1\0\1\160\20\0\2\160\12\157\1\0\3\157"+
    "\1\0\3\157\1\203\3\157\1\0\2\157\1\0\1\160"+
    "\51\0\1\130\12\0\3\157\1\0\1\160\20\0\2\160"+
    "\12\157\1\0\3\157\1\0\2\157\1\176\4\157\1\0"+
    "\2\157\1\0\1\160\1\0\1\204\2\157\1\0\1\160"+
    "\20\0\2\160\3\157\1\205\6\157\1\0\3\157\1\0"+
    "\6\157\1\206\1\0\2\157\1\0\1\160\1\0\3\157"+
    "\1\0\1\160\20\0\2\160\11\157\1\207\1\0\3\157"+
    "\1\0\7\157\1\0\2\157\1\0\1\160\1\0\3\157"+
    "\1\0\1\160\20\0\2\160\1\157\1\210\10\157\1\0"+
    "\3\157\1\0\7\157\1\0\2\157\1\0\1\160\1\0"+
    "\3\157\1\0\1\160\20\0\2\160\12\157\1\0\2\157"+
    "\1\163\1\0\7\157\1\0\2\157\1\0\1\160\1\0"+
    "\3\157\1\0\1\160\20\0\2\160\12\157\1\0\2\157"+
    "\1\211\1\0\7\157\1\0\2\157\1\0\1\160\44\0"+
    "\1\212\1\130\16\0\3\157\1\0\1\160\20\0\2\160"+
    "\12\157\1\0\1\157\1\213\1\176\1\0\7\157\1\0"+
    "\2\157\1\0\1\160\1\0\3\157\1\0\1\160\20\0"+
    "\2\160\4\157\1\214\5\157\1\0\3\157\1\0\7\157"+
    "\1\0\2\157\1\0\1\160\1\0\3\157\1\0\1\160"+
    "\20\0\2\160\10\157\1\215\1\157\1\0\3\157\1\0"+
    "\7\157\1\0\2\157\1\0\1\160\1\0\3\157\1\0"+
    "\1\160\20\0\2\160\12\157\1\0\3\157\1\0\4\157"+
    "\1\163\2\157\1\0\2\157\1\0\1\160\1\0\3\157"+
    "\1\0\1\160\20\0\2\160\12\157\1\0\3\157\1\0"+
    "\6\157\1\163\1\0\2\157\1\0\1\160\1\0\3\157"+
    "\1\0\1\160\20\0\2\160\1\216\11\157\1\0\3\157"+
    "\1\0\7\157\1\0\2\157\1\0\1\160\45\0\1\130"+
    "\53\0\1\217\55\0\1\220\32\0\3\157\1\0\1\160"+
    "\20\0\2\160\6\157\1\221\3\157\1\0\3\157\1\0"+
    "\7\157\1\0\2\157\1\0\1\160\1\0\3\157\1\0"+
    "\1\160\20\0\2\160\1\157\1\222\10\157\1\0\3\157"+
    "\1\0\7\157\1\0\2\157\1\0\1\160\1\0\3\157"+
    "\1\0\1\160\20\0\2\160\6\157\1\176\3\157\1\0"+
    "\3\157\1\0\7\157\1\0\2\157\1\0\1\160\1\0"+
    "\3\157\1\0\1\160\20\0\2\160\12\157\1\223\1\224"+
    "\2\157\1\0\7\157\1\0\2\157\1\0\1\160\45\0"+
    "\1\225\16\0\3\157\1\0\1\160\20\0\2\160\12\157"+
    "\1\0\2\157\1\226\1\0\7\157\1\0\2\157\1\0"+
    "\1\160\1\0\3\157\1\0\1\160\20\0\2\160\12\157"+
    "\1\111\1\227\2\157\1\0\7\157\1\0\2\157\1\0"+
    "\1\160\1\0\3\157\1\0\1\160\20\0\2\160\12\157"+
    "\1\0\2\157\1\230\1\0\7\157\1\0\2\157\1\0"+
    "\1\160\1\0\1\231\2\157\1\0\1\160\20\0\2\160"+
    "\12\157\1\0\3\157\1\0\7\157\1\0\2\157\1\0"+
    "\1\160\1\0\3\157\1\0\1\160\20\0\2\160\1\157"+
    "\1\232\10\157\1\0\3\157\1\0\7\157\1\0\2\157"+
    "\1\0\1\160\6\155\1\0\52\155\1\233\1\155\3\0"+
    "\1\234\60\0\3\235\1\0\1\236\20\0\2\236\12\235"+
    "\1\0\3\235\1\0\7\235\1\0\2\235\1\0\1\236"+
    "\1\0\3\236\1\0\1\236\20\0\14\236\1\0\3\236"+
    "\1\0\7\236\1\0\2\236\1\0\1\236\1\0\3\235"+
    "\1\0\1\236\20\0\2\236\12\235\1\0\3\235\1\140"+
    "\1\237\6\235\1\0\2\235\1\0\1\236\30\0\1\130"+
    "\33\0\3\235\1\0\1\236\20\0\2\236\1\240\11\235"+
    "\1\0\3\235\1\0\7\235\1\0\2\235\1\0\1\236"+
    "\1\0\3\235\1\0\1\236\20\0\2\236\6\235\1\240"+
    "\3\235\1\0\3\235\1\0\7\235\1\0\2\235\1\0"+
    "\1\236\3\0\1\241\62\0\1\166\10\0\1\242\13\0"+
    "\1\243\35\0\1\244\4\0\1\245\103\0\1\246\31\0"+
    "\6\173\1\247\54\173\6\0\1\174\12\0\1\6\44\0"+
    "\1\175\15\0\1\250\42\0\3\235\1\0\1\236\20\0"+
    "\2\236\12\235\1\0\3\235\1\0\3\235\1\251\3\235"+
    "\1\0\2\235\1\0\1\236\1\0\3\235\1\0\1\236"+
    "\20\0\2\236\12\235\1\0\3\235\1\162\1\252\6\235"+
    "\1\0\2\235\1\0\1\236\1\0\1\253\2\235\1\0"+
    "\1\236\20\0\2\236\12\235\1\0\3\235\1\0\7\235"+
    "\1\0\2\235\1\0\1\236\1\0\3\235\1\0\1\236"+
    "\20\0\2\236\3\235\1\254\6\235\1\0\3\235\1\0"+
    "\7\235\1\0\2\235\1\0\1\236\1\0\3\235\1\0"+
    "\1\236\20\0\2\236\4\235\1\255\5\235\1\0\3\235"+
    "\1\0\7\235\1\0\2\235\1\0\1\236\1\0\3\235"+
    "\1\0\1\236\20\0\2\236\1\235\1\256\10\235\1\0"+
    "\3\235\1\0\7\235\1\0\2\235\1\0\1\236\1\0"+
    "\3\235\1\0\1\236\20\0\2\236\5\235\1\240\4\235"+
    "\1\0\1\235\1\240\1\235\1\0\7\235\1\0\2\235"+
    "\1\0\1\236\1\0\3\235\1\0\1\236\20\0\2\236"+
    "\1\257\11\235\1\0\3\235\1\0\7\235\1\0\2\235"+
    "\1\0\1\236\1\0\3\235\1\0\1\236\20\0\2\236"+
    "\12\235\1\260\1\261\2\235\1\0\7\235\1\0\2\235"+
    "\1\0\1\236\1\0\3\235\1\0\1\236\20\0\2\236"+
    "\12\235\1\0\1\235\1\262\1\235\1\0\7\235\1\0"+
    "\2\235\1\0\1\236\1\0\3\235\1\0\1\236\20\0"+
    "\2\236\1\235\1\240\10\235\1\0\3\235\1\0\7\235"+
    "\1\0\2\235\1\0\1\236\42\0\2\263\20\0\3\235"+
    "\1\0\1\236\20\0\2\236\12\235\1\263\1\264\2\235"+
    "\1\0\7\235\1\0\2\235\1\0\1\236\1\0\3\235"+
    "\1\0\1\236\20\0\2\236\11\235\1\265\1\0\3\235"+
    "\1\0\7\235\1\0\2\235\1\0\1\236\1\0\3\235"+
    "\1\0\1\236\20\0\2\236\1\266\11\235\1\0\3\235"+
    "\1\0\7\235\1\0\2\235\1\0\1\236\1\0\3\235"+
    "\1\0\1\236\20\0\2\236\4\235\1\240\5\235\1\0"+
    "\3\235\1\0\7\235\1\0\2\235\1\0\1\236\42\0"+
    "\2\267\55\0\1\270\25\0\3\235\1\0\1\236\20\0"+
    "\2\236\12\235\1\267\1\271\2\235\1\0\7\235\1\0"+
    "\2\235\1\0\1\236\1\0\3\235\1\0\1\236\20\0"+
    "\2\236\6\235\1\272\3\235\1\0\3\235\1\0\7\235"+
    "\1\0\2\235\1\0\1\236\45\0\1\162\16\0\3\235"+
    "\1\0\1\236\20\0\2\236\12\235\1\0\2\235\1\252"+
    "\1\0\7\235\1\0\2\235\1\0\1\236\50\0\1\130"+
    "\13\0\3\235\1\0\1\236\20\0\2\236\12\235\1\0"+
    "\3\235\1\0\1\235\1\240\5\235\1\0\2\235\1\0"+
    "\1\236\1\0\3\235\1\0\1\236\20\0\2\236\12\235"+
    "\1\0\1\235\1\252\1\235\1\0\7\235\1\0\2\235"+
    "\1\0\1\236\1\0\3\235\1\0\1\236\20\0\2\236"+
    "\12\235\1\116\1\266\2\235\1\0\7\235\1\0\2\235"+
    "\1\0\1\236\1\0\3\235\1\0\1\236\20\0\2\236"+
    "\12\235\1\0\3\235\1\0\7\235\1\273\1\274\1\235"+
    "\1\0\1\236\1\0\1\275\2\235\1\0\1\236\20\0"+
    "\2\236\11\235\1\276\1\0\3\235\1\0\7\235\1\0"+
    "\2\235\1\0\1\236\3\0\1\244\60\0\3\277\1\0"+
    "\1\300\20\0\2\300\12\277\1\0\3\277\1\0\7\277"+
    "\1\0\2\277\1\0\1\300\1\0\3\300\1\0\1\300"+
    "\20\0\14\300\1\0\3\300\1\0\7\300\1\0\2\300"+
    "\1\0\1\300\1\0\3\277\1\0\1\300\20\0\2\300"+
    "\12\277\1\0\2\277\1\301\1\0\7\277\1\0\2\277"+
    "\1\0\1\300\3\0\1\241\10\0\1\242\51\0\1\302"+
    "\62\0\1\303\4\0\1\304\104\0\1\305\30\0\6\173"+
    "\1\247\12\173\1\6\41\173\1\0\3\277\1\0\1\300"+
    "\20\0\2\300\3\277\1\306\6\277\1\0\3\277\1\0"+
    "\7\277\1\0\2\277\1\0\1\300\1\0\3\277\1\0"+
    "\1\300\20\0\2\300\1\301\11\277\1\0\3\277\1\0"+
    "\7\277\1\0\2\277\1\0\1\300\1\0\3\277\1\0"+
    "\1\300\20\0\2\300\12\277\1\0\2\277\1\307\1\0"+
    "\7\277\1\0\2\277\1\0\1\300\1\0\3\277\1\0"+
    "\1\300\20\0\2\300\7\277\1\301\2\277\1\0\3\277"+
    "\1\0\7\277\1\0\2\277\1\0\1\300\1\0\3\277"+
    "\1\0\1\300\20\0\2\300\12\277\1\0\2\277\1\310"+
    "\1\0\7\277\1\0\2\277\1\0\1\300\1\0\3\277"+
    "\1\0\1\300\20\0\2\300\6\277\1\311\3\277\1\0"+
    "\3\277\1\0\7\277\1\0\2\277\1\0\1\300\1\0"+
    "\3\277\1\0\1\300\20\0\2\300\3\277\1\312\6\277"+
    "\1\0\3\277\1\0\7\277\1\0\2\277\1\0\1\300"+
    "\34\0\1\130\27\0\3\277\1\0\1\300\20\0\2\300"+
    "\4\277\1\301\5\277\1\0\3\277\1\0\7\277\1\0"+
    "\2\277\1\0\1\300\1\0\3\277\1\0\1\300\20\0"+
    "\2\300\1\313\11\277\1\0\3\277\1\0\7\277\1\0"+
    "\2\277\1\0\1\300\34\0\1\162\27\0\3\277\1\0"+
    "\1\300\20\0\2\300\4\277\1\314\5\277\1\0\3\277"+
    "\1\0\7\277\1\0\2\277\1\0\1\300\1\0\3\277"+
    "\1\0\1\300\20\0\2\300\12\277\1\315\1\316\2\277"+
    "\1\0\7\277\1\0\2\277\1\0\1\300\1\0\3\277"+
    "\1\0\1\300\20\0\2\300\12\277\1\0\1\277\1\301"+
    "\1\277\1\0\7\277\1\0\2\277\1\0\1\300\34\0"+
    "\1\317\73\0\1\320\16\0\3\277\1\0\1\300\20\0"+
    "\2\300\4\277\1\321\5\277\1\0\3\277\1\0\7\277"+
    "\1\0\2\277\1\0\1\300\1\0\3\277\1\0\1\300"+
    "\20\0\2\300\12\277\1\0\2\277\1\322\1\0\7\277"+
    "\1\0\2\277\1\0\1\300\30\0\1\323\33\0\3\277"+
    "\1\0\1\300\20\0\2\300\1\311\11\277\1\0\3\277"+
    "\1\0\7\277\1\0\2\277\1\0\1\300\1\0\3\277"+
    "\1\0\1\300\20\0\2\300\1\324\11\277\1\0\3\277"+
    "\1\0\7\277\1\0\2\277\1\0\1\300\1\0\3\277"+
    "\1\0\1\300\20\0\2\300\6\277\1\325\3\277\1\0"+
    "\3\277\1\0\7\277\1\0\2\277\1\0\1\300\1\0"+
    "\3\326\1\0\1\327\20\0\2\327\12\326\1\0\3\326"+
    "\1\0\7\326\1\0\2\326\1\0\1\327\1\0\3\327"+
    "\1\0\1\327\20\0\14\327\1\0\3\327\1\0\7\327"+
    "\1\0\2\327\1\0\1\327\3\0\1\302\10\0\1\242"+
    "\51\0\1\303\76\0\1\330\44\0\3\326\1\0\1\327"+
    "\20\0\2\327\6\326\1\331\3\326\1\0\3\326\1\0"+
    "\7\326\1\0\2\326\1\0\1\327\1\0\3\326\1\0"+
    "\1\327\20\0\2\327\12\326\1\332\1\333\2\326\1\0"+
    "\7\326\1\0\2\326\1\0\1\327\1\0\3\326\1\0"+
    "\1\327\20\0\2\327\1\326\1\334\10\326\1\0\3\326"+
    "\1\0\7\326\1\0\2\326\1\0\1\327\1\0\3\326"+
    "\1\0\1\327\20\0\2\327\5\326\1\334\4\326\1\0"+
    "\3\326\1\0\7\326\1\0\2\326\1\0\1\327\1\0"+
    "\3\326\1\0\1\327\20\0\2\327\12\326\1\0\2\326"+
    "\1\334\1\0\7\326\1\0\2\326\1\0\1\327\1\0"+
    "\3\326\1\0\1\327\20\0\2\327\3\326\1\335\6\326"+
    "\1\0\3\326\1\0\7\326\1\0\2\326\1\0\1\327"+
    "\1\0\3\326\1\0\1\327\20\0\2\327\1\334\11\326"+
    "\1\0\3\326\1\0\7\326\1\0\2\326\1\0\1\327"+
    "\34\0\1\140\27\0\3\326\1\0\1\327\20\0\2\327"+
    "\4\326\1\336\5\326\1\0\3\326\1\0\7\326\1\0"+
    "\2\326\1\0\1\327\41\0\1\130\63\0\2\315\20\0"+
    "\3\326\1\0\1\327\20\0\2\327\11\326\1\334\1\0"+
    "\3\326\1\0\7\326\1\0\2\326\1\0\1\327\1\0"+
    "\3\326\1\0\1\327\20\0\2\327\12\326\1\315\1\337"+
    "\2\326\1\0\7\326\1\0\2\326\1\0\1\327\35\0"+
    "\1\130\26\0\3\326\1\0\1\327\20\0\2\327\5\326"+
    "\1\340\4\326\1\0\3\326\1\0\7\326\1\0\2\326"+
    "\1\0\1\327\1\0\3\326\1\0\1\327\20\0\2\327"+
    "\3\326\1\341\6\326\1\0\3\326\1\0\7\326\1\0"+
    "\2\326\1\0\1\327\1\0\3\342\1\0\1\343\20\0"+
    "\2\343\12\342\1\0\3\342\1\0\7\342\1\0\2\342"+
    "\1\0\1\343\1\0\3\343\1\0\1\343\20\0\14\343"+
    "\1\0\3\343\1\0\7\343\1\0\2\343\1\0\1\343"+
    "\17\0\1\6\44\0\3\342\1\0\1\343\20\0\2\343"+
    "\5\342\1\344\4\342\1\0\3\342\1\0\7\342\1\0"+
    "\2\342\1\0\1\343\31\0\1\260\32\0\3\342\1\0"+
    "\1\343\20\0\2\343\1\342\1\345\10\342\1\0\3\342"+
    "\1\0\7\342\1\0\2\342\1\0\1\343\1\0\3\342"+
    "\1\0\1\343\20\0\2\343\4\342\1\344\5\342\1\0"+
    "\3\342\1\0\7\342\1\0\2\342\1\0\1\343\1\0"+
    "\3\342\1\0\1\343\20\0\2\343\12\342\1\0\2\342"+
    "\1\344\1\0\7\342\1\0\2\342\1\0\1\343\1\0"+
    "\3\342\1\0\1\343\20\0\2\343\4\342\1\346\5\342"+
    "\1\0\3\342\1\0\7\342\1\0\2\342\1\0\1\343"+
    "\1\0\3\342\1\0\1\343\20\0\2\343\12\342\1\0"+
    "\3\342\1\0\4\342\1\347\2\342\1\0\2\342\1\0"+
    "\1\343\1\0\3\342\1\0\1\343\20\0\2\343\12\342"+
    "\1\0\3\342\1\0\5\342\1\344\1\342\1\0\2\342"+
    "\1\0\1\343\1\0\3\350\1\0\1\351\20\0\2\351"+
    "\12\350\1\0\3\350\1\0\7\350\1\0\2\350\1\0"+
    "\1\351\1\0\3\351\1\0\1\351\20\0\14\351\1\0"+
    "\3\351\1\0\7\351\1\0\2\351\1\0\1\351\1\0"+
    "\3\350\1\0\1\351\20\0\2\351\4\350\1\352\5\350"+
    "\1\0\3\350\1\0\7\350\1\0\2\350\1\0\1\351"+
    "\1\0\3\350\1\0\1\351\20\0\2\351\12\350\1\0"+
    "\2\350\1\352\1\0\7\350\1\0\2\350\1\0\1\351"+
    "\1\0\3\350\1\0\1\351\20\0\2\351\6\350\1\353"+
    "\3\350\1\0\3\350\1\0\7\350\1\0\2\350\1\0"+
    "\1\351\1\0\3\354\1\0\1\355\20\0\2\355\12\354"+
    "\1\0\3\354\1\0\7\354\1\0\2\354\1\0\1\355"+
    "\1\0\3\355\1\0\1\355\20\0\14\355\1\0\3\355"+
    "\1\0\7\355\1\0\2\355\1\0\1\355\1\0\3\354"+
    "\1\0\1\355\20\0\2\355\1\356\11\354\1\0\3\354"+
    "\1\0\7\354\1\0\2\354\1\0\1\355\1\0\3\357"+
    "\1\0\1\360\20\0\2\360\12\357\1\0\3\357\1\0"+
    "\7\357\1\0\2\357\1\0\1\360\1\0\3\360\1\0"+
    "\1\360\20\0\14\360\1\0\3\360\1\0\7\360\1\0"+
    "\2\360\1\0\1\360\1\0\3\361\1\0\1\362\20\0"+
    "\2\362\12\361\1\0\3\361\1\0\7\361\1\0\2\361"+
    "\1\0\1\362\1\0\3\362\1\0\1\362\20\0\14\362"+
    "\1\0\3\362\1\0\7\362\1\0\2\362\1\0\1\362"+
    "\1\0\3\363\1\0\1\364\20\0\2\364\12\363\1\0"+
    "\3\363\1\0\7\363\1\0\2\363\1\0\1\364\1\0"+
    "\3\364\1\0\1\364\20\0\14\364\1\0\3\364\1\0"+
    "\7\364\1\0\2\364\1\0\1\364\1\0\3\365\1\0"+
    "\1\366\20\0\2\366\12\365\1\0\3\365\1\0\7\365"+
    "\1\0\2\365\1\0\1\366\1\0\3\366\1\0\1\366"+
    "\20\0\14\366\1\0\3\366\1\0\7\366\1\0\2\366"+
    "\1\0\1\366\1\0\3\367\1\0\1\370\20\0\2\370"+
    "\12\367\1\0\3\367\1\0\7\367\1\0\2\367\1\0"+
    "\1\370\1\0\3\370\1\0\1\370\20\0\14\370\1\0"+
    "\3\370\1\0\7\370\1\0\2\370\1\0\1\370\1\0"+
    "\3\371\1\0\1\372\20\0\2\372\12\371\1\0\3\371"+
    "\1\0\7\371\1\0\2\371\1\0\1\372\1\0\3\372"+
    "\1\0\1\372\20\0\14\372\1\0\3\372\1\0\7\372"+
    "\1\0\2\372\1\0\1\372\1\0\3\373\1\0\1\374"+
    "\20\0\2\374\12\373\1\0\3\373\1\0\7\373\1\0"+
    "\2\373\1\0\1\374\1\0\3\374\1\0\1\374\20\0"+
    "\14\374\1\0\3\374\1\0\7\374\1\0\2\374\1\0"+
    "\1\374\1\0\3\375\1\0\1\376\20\0\2\376\12\375"+
    "\1\0\3\375\1\0\7\375\1\0\2\375\1\0\1\376"+
    "\1\0\3\376\1\0\1\376\20\0\14\376\1\0\3\376"+
    "\1\0\7\376\1\0\2\376\1\0\1\376\1\0\3\377"+
    "\1\0\1\u0100\20\0\2\u0100\12\377\1\0\3\377\1\0"+
    "\7\377\1\0\2\377\1\0\1\u0100\1\0\3\u0100\1\0"+
    "\1\u0100\20\0\14\u0100\1\0\3\u0100\1\0\7\u0100\1\0"+
    "\2\u0100\1\0\1\u0100\1\0\3\u0101\1\0\1\u0102\20\0"+
    "\2\u0102\12\u0101\1\0\3\u0101\1\0\7\u0101\1\0\2\u0101"+
    "\1\0\1\u0102\1\0\3\u0102\1\0\1\u0102\20\0\14\u0102"+
    "\1\0\3\u0102\1\0\7\u0102\1\0\2\u0102\1\0\1\u0102"+
    "\1\0\3\u0103\1\0\1\u0104\20\0\2\u0104\12\u0103\1\0"+
    "\3\u0103\1\0\7\u0103\1\0\2\u0103\1\0\1\u0104\1\0"+
    "\3\u0104\1\0\1\u0104\20\0\14\u0104\1\0\3\u0104\1\0"+
    "\7\u0104\1\0\2\u0104\1\0\1\u0104\1\0\3\u0105\1\0"+
    "\1\u0106\20\0\2\u0106\12\u0105\1\0\3\u0105\1\0\7\u0105"+
    "\1\0\2\u0105\1\0\1\u0106\1\0\3\u0106\1\0\1\u0106"+
    "\20\0\14\u0106\1\0\3\u0106\1\0\7\u0106\1\0\2\u0106"+
    "\1\0\1\u0106\1\0\3\u0107\1\0\1\u0108\20\0\2\u0108"+
    "\12\u0107\1\0\3\u0107\1\0\7\u0107\1\0\2\u0107\1\0"+
    "\1\u0108\1\0\3\u0108\1\0\1\u0108\20\0\14\u0108\1\0"+
    "\3\u0108\1\0\7\u0108\1\0\2\u0108\1\0\1\u0108\1\0"+
    "\3\u0109\1\0\1\u010a\20\0\2\u010a\12\u0109\1\0\3\u0109"+
    "\1\0\7\u0109\1\0\2\u0109\1\0\1\u010a\1\0\3\u010a"+
    "\1\0\1\u010a\20\0\14\u010a\1\0\3\u010a\1\0\7\u010a"+
    "\1\0\2\u010a\1\0\1\u010a\1\0\3\u010b\1\0\1\u010c"+
    "\20\0\2\u010c\12\u010b\1\0\3\u010b\1\0\7\u010b\1\0"+
    "\2\u010b\1\0\1\u010c\1\0\3\u010c\1\0\1\u010c\20\0"+
    "\14\u010c\1\0\3\u010c\1\0\7\u010c\1\0\2\u010c\1\0"+
    "\1\u010c\1\0\3\u010d\1\0\1\u010e\20\0\2\u010e\12\u010d"+
    "\1\0\3\u010d\1\0\7\u010d\1\0\2\u010d\1\0\1\u010e"+
    "\1\0\3\u010e\1\0\1\u010e\20\0\14\u010e\1\0\3\u010e"+
    "\1\0\7\u010e\1\0\2\u010e\1\0\1\u010e\1\0\3\u010f"+
    "\1\0\1\u0110\20\0\2\u0110\12\u010f\1\0\3\u010f\1\0"+
    "\7\u010f\1\0\2\u010f\1\0\1\u0110\1\0\3\u0110\1\0"+
    "\1\u0110\20\0\14\u0110\1\0\3\u0110\1\0\7\u0110\1\0"+
    "\2\u0110\1\0\1\u0110\1\0\3\u0111\1\0\1\u0112\20\0"+
    "\2\u0112\12\u0111\1\0\3\u0111\1\0\7\u0111\1\0\2\u0111"+
    "\1\0\1\u0112\1\0\3\u0112\1\0\1\u0112\20\0\14\u0112"+
    "\1\0\3\u0112\1\0\7\u0112\1\0\2\u0112\1\0\1\u0112"+
    "\1\0\3\u0113\1\0\1\u0114\20\0\2\u0114\12\u0113\1\0"+
    "\3\u0113\1\0\7\u0113\1\0\2\u0113\1\0\1\u0114\1\0"+
    "\3\u0114\1\0\1\u0114\20\0\14\u0114\1\0\3\u0114\1\0"+
    "\7\u0114\1\0\2\u0114\1\0\1\u0114\1\0\3\u0115\1\0"+
    "\1\u0116\20\0\2\u0116\12\u0115\1\0\3\u0115\1\0\7\u0115"+
    "\1\0\2\u0115\1\0\1\u0116\1\0\3\u0116\1\0\1\u0116"+
    "\20\0\14\u0116\1\0\3\u0116\1\0\7\u0116\1\0\2\u0116"+
    "\1\0\1\u0116\1\0\3\u0117\1\0\1\u0118\20\0\2\u0118"+
    "\12\u0117\1\0\3\u0117\1\0\7\u0117\1\0\2\u0117\1\0"+
    "\1\u0118\1\0\3\u0118\1\0\1\u0118\20\0\14\u0118\1\0"+
    "\3\u0118\1\0\7\u0118\1\0\2\u0118\1\0\1\u0118\1\0"+
    "\3\u0119\1\0\1\u011a\20\0\2\u011a\12\u0119\1\0\3\u0119"+
    "\1\0\7\u0119\1\0\2\u0119\1\0\1\u011a\1\0\3\u011a"+
    "\1\0\1\u011a\20\0\14\u011a\1\0\3\u011a\1\0\7\u011a"+
    "\1\0\2\u011a\1\0\1\u011a\1\0\3\u011b\1\0\1\u011c"+
    "\20\0\2\u011c\12\u011b\1\0\3\u011b\1\0\7\u011b\1\0"+
    "\2\u011b\1\0\1\u011c\1\0\3\u011c\1\0\1\u011c\20\0"+
    "\14\u011c\1\0\3\u011c\1\0\7\u011c\1\0\2\u011c\1\0"+
    "\1\u011c\1\0\3\u011d\1\0\1\u011e\20\0\2\u011e\12\u011d"+
    "\1\0\3\u011d\1\0\7\u011d\1\0\2\u011d\1\0\1\u011e"+
    "\1\0\3\u011e\1\0\1\u011e\20\0\14\u011e\1\0\3\u011e"+
    "\1\0\7\u011e\1\0\2\u011e\1\0\1\u011e\1\0\3\u011f"+
    "\1\0\1\u0120\20\0\2\u0120\12\u011f\1\0\3\u011f\1\0"+
    "\7\u011f\1\0\2\u011f\1\0\1\u0120\1\0\3\u0120\1\0"+
    "\1\u0120\20\0\14\u0120\1\0\3\u0120\1\0\7\u0120\1\0"+
    "\2\u0120\1\0\1\u0120\1\0\3\u0121\1\0\1\u0122\20\0"+
    "\2\u0122\12\u0121\1\0\3\u0121\1\0\7\u0121\1\0\2\u0121"+
    "\1\0\1\u0122\1\0\3\u0122\1\0\1\u0122\20\0\14\u0122"+
    "\1\0\3\u0122\1\0\7\u0122\1\0\2\u0122\1\0\1\u0122"+
    "\1\0\3\u0123\1\0\1\u0124\20\0\2\u0124\12\u0123\1\0"+
    "\3\u0123\1\0\7\u0123\1\0\2\u0123\1\0\1\u0124\1\0"+
    "\3\u0124\1\0\1\u0124\20\0\14\u0124\1\0\3\u0124\1\0"+
    "\7\u0124\1\0\2\u0124\1\0\1\u0124\1\0\3\u0125\1\0"+
    "\1\u0126\20\0\2\u0126\12\u0125\1\0\3\u0125\1\0\7\u0125"+
    "\1\0\2\u0125\1\0\1\u0126\1\0\3\u0126\1\0\1\u0126"+
    "\20\0\14\u0126\1\0\3\u0126\1\0\7\u0126\1\0\2\u0126"+
    "\1\0\1\u0126\1\0\3\u0127\1\0\1\u0128\20\0\2\u0128"+
    "\12\u0127\1\0\3\u0127\1\0\7\u0127\1\0\2\u0127\1\0"+
    "\1\u0128\1\0\3\u0128\1\0\1\u0128\20\0\14\u0128\1\0"+
    "\3\u0128\1\0\7\u0128\1\0\2\u0128\1\0\1\u0128\1\0"+
    "\3\u0129\1\0\1\u012a\20\0\2\u012a\12\u0129\1\0\3\u0129"+
    "\1\0\7\u0129\1\0\2\u0129\1\0\1\u012a\1\0\3\u012a"+
    "\1\0\1\u012a\20\0\14\u012a\1\0\3\u012a\1\0\7\u012a"+
    "\1\0\2\u012a\1\0\1\u012a\1\0\3\u012b\1\0\1\u012c"+
    "\20\0\2\u012c\12\u012b\1\0\3\u012b\1\0\7\u012b\1\0"+
    "\2\u012b\1\0\1\u012c\1\0\3\u012c\1\0\1\u012c\20\0"+
    "\14\u012c\1\0\3\u012c\1\0\7\u012c\1\0\2\u012c\1\0"+
    "\1\u012c\1\0\3\u012d\1\0\1\u012e\20\0\2\u012e\12\u012d"+
    "\1\0\3\u012d\1\0\7\u012d\1\0\2\u012d\1\0\1\u012e"+
    "\1\0\3\u012e\1\0\1\u012e\20\0\14\u012e\1\0\3\u012e"+
    "\1\0\7\u012e\1\0\2\u012e\1\0\1\u012e\1\0\3\u012f"+
    "\1\0\1\u0130\20\0\2\u0130\12\u012f\1\0\3\u012f\1\0"+
    "\7\u012f\1\0\2\u012f\1\0\1\u0130\1\0\3\u0130\1\0"+
    "\1\u0130\20\0\14\u0130\1\0\3\u0130\1\0\7\u0130\1\0"+
    "\2\u0130\1\0\1\u0130\1\0\3\u0131\1\0\1\u0132\20\0"+
    "\2\u0132\12\u0131\1\0\3\u0131\1\0\7\u0131\1\0\2\u0131"+
    "\1\0\1\u0132\1\0\3\u0132\1\0\1\u0132\20\0\14\u0132"+
    "\1\0\3\u0132\1\0\7\u0132\1\0\2\u0132\1\0\1\u0132"+
    "\1\0\3\u0133\1\0\1\u0134\20\0\2\u0134\12\u0133\1\0"+
    "\3\u0133\1\0\7\u0133\1\0\2\u0133\1\0\1\u0134\1\0"+
    "\3\u0134\1\0\1\u0134\20\0\14\u0134\1\0\3\u0134\1\0"+
    "\7\u0134\1\0\2\u0134\1\0\1\u0134\1\0\3\u0135\1\0"+
    "\1\u0136\20\0\2\u0136\12\u0135\1\0\3\u0135\1\0\7\u0135"+
    "\1\0\2\u0135\1\0\1\u0136\1\0\3\u0136\1\0\1\u0136"+
    "\20\0\14\u0136\1\0\3\u0136\1\0\7\u0136\1\0\2\u0136"+
    "\1\0\1\u0136\1\0\3\u0137\1\0\1\u0138\20\0\2\u0138"+
    "\12\u0137\1\0\3\u0137\1\0\7\u0137\1\0\2\u0137\1\0"+
    "\1\u0138\1\0\3\u0138\1\0\1\u0138\20\0\14\u0138\1\0"+
    "\3\u0138\1\0\7\u0138\1\0\2\u0138\1\0\1\u0138\1\0"+
    "\3\u0139\1\0\1\u013a\20\0\2\u013a\12\u0139\1\0\3\u0139"+
    "\1\0\7\u0139\1\0\2\u0139\1\0\1\u013a\1\0\3\u013a"+
    "\1\0\1\u013a\20\0\14\u013a\1\0\3\u013a\1\0\7\u013a"+
    "\1\0\2\u013a\1\0\1\u013a\1\0\3\u013b\1\0\1\u013c"+
    "\20\0\2\u013c\12\u013b\1\0\3\u013b\1\0\7\u013b\1\0"+
    "\2\u013b\1\0\1\u013c\1\0\3\u013c\1\0\1\u013c\20\0"+
    "\14\u013c\1\0\3\u013c\1\0\7\u013c\1\0\2\u013c\1\0"+
    "\1\u013c\1\0\3\u013d\1\0\1\u013e\20\0\2\u013e\12\u013d"+
    "\1\0\3\u013d\1\0\7\u013d\1\0\2\u013d\1\0\1\u013e"+
    "\1\0\3\u013e\1\0\1\u013e\20\0\14\u013e\1\0\3\u013e"+
    "\1\0\7\u013e\1\0\2\u013e\1\0\1\u013e\1\0\3\u013f"+
    "\1\0\1\u0140\20\0\2\u0140\12\u013f\1\0\3\u013f\1\0"+
    "\7\u013f\1\0\2\u013f\1\0\1\u0140\1\0\3\u0140\1\0"+
    "\1\u0140\20\0\14\u0140\1\0\3\u0140\1\0\7\u0140\1\0"+
    "\2\u0140\1\0\1\u0140\1\0\3\u0141\1\0\1\u0142\20\0"+
    "\2\u0142\12\u0141\1\0\3\u0141\1\0\7\u0141\1\0\2\u0141"+
    "\1\0\1\u0142\1\0\3\u0142\1\0\1\u0142\20\0\14\u0142"+
    "\1\0\3\u0142\1\0\7\u0142\1\0\2\u0142\1\0\1\u0142"+
    "\1\0\3\u0143\1\0\1\u0144\20\0\2\u0144\12\u0143\1\0"+
    "\3\u0143\1\0\7\u0143\1\0\2\u0143\1\0\1\u0144\1\0"+
    "\3\u0144\1\0\1\u0144\20\0\14\u0144\1\0\3\u0144\1\0"+
    "\7\u0144\1\0\2\u0144\1\0\1\u0144\1\0\3\u0145\1\0"+
    "\1\u0146\20\0\2\u0146\12\u0145\1\0\3\u0145\1\0\7\u0145"+
    "\1\0\2\u0145\1\0\1\u0146\1\0\3\u0146\1\0\1\u0146"+
    "\20\0\14\u0146\1\0\3\u0146\1\0\7\u0146\1\0\2\u0146"+
    "\1\0\1\u0146\1\0\3\u0147\1\0\1\u0148\20\0\2\u0148"+
    "\12\u0147\1\0\3\u0147\1\0\7\u0147\1\0\2\u0147\1\0"+
    "\1\u0148\1\0\3\u0148\1\0\1\u0148\20\0\14\u0148\1\0"+
    "\3\u0148\1\0\7\u0148\1\0\2\u0148\1\0\1\u0148\1\0"+
    "\3\u0149\1\0\1\u014a\20\0\2\u014a\12\u0149\1\0\3\u0149"+
    "\1\0\7\u0149\1\0\2\u0149\1\0\1\u014a\1\0\3\u014a"+
    "\1\0\1\u014a\20\0\14\u014a\1\0\3\u014a\1\0\7\u014a"+
    "\1\0\2\u014a\1\0\1\u014a\1\0\3\u014b\1\0\1\u014c"+
    "\20\0\2\u014c\12\u014b\1\0\3\u014b\1\0\7\u014b\1\0"+
    "\2\u014b\1\0\1\u014c\1\0\3\u014c\1\0\1\u014c\20\0"+
    "\14\u014c\1\0\3\u014c\1\0\7\u014c\1\0\2\u014c\1\0"+
    "\1\u014c\1\0\3\u014d\1\0\1\u014e\20\0\2\u014e\12\u014d"+
    "\1\0\3\u014d\1\0\7\u014d\1\0\2\u014d\1\0\1\u014e"+
    "\1\0\3\u014e\1\0\1\u014e\20\0\14\u014e\1\0\3\u014e"+
    "\1\0\7\u014e\1\0\2\u014e\1\0\1\u014e\1\0\3\u014f"+
    "\1\0\1\u0150\20\0\2\u0150\12\u014f\1\0\3\u014f\1\0"+
    "\7\u014f\1\0\2\u014f\1\0\1\u0150\1\0\3\u0150\1\0"+
    "\1\u0150\20\0\14\u0150\1\0\3\u0150\1\0\7\u0150\1\0"+
    "\2\u0150\1\0\1\u0150\1\0\3\u0151\1\0\1\u0152\20\0"+
    "\2\u0152\12\u0151\1\0\3\u0151\1\0\7\u0151\1\0\2\u0151"+
    "\1\0\1\u0152\1\0\3\u0152\1\0\1\u0152\20\0\14\u0152"+
    "\1\0\3\u0152\1\0\7\u0152\1\0\2\u0152\1\0\1\u0152"+
    "\1\0\3\u0153\1\0\1\u0154\20\0\2\u0154\12\u0153\1\0"+
    "\3\u0153\1\0\7\u0153\1\0\2\u0153\1\0\1\u0154\1\0"+
    "\3\u0154\1\0\1\u0154\20\0\14\u0154\1\0\3\u0154\1\0"+
    "\7\u0154\1\0\2\u0154\1\0\1\u0154\1\0\3\u0155\1\0"+
    "\1\u0156\20\0\2\u0156\12\u0155\1\0\3\u0155\1\0\7\u0155"+
    "\1\0\2\u0155\1\0\1\u0156\1\0\3\u0156\1\0\1\u0156"+
    "\20\0\14\u0156\1\0\3\u0156\1\0\7\u0156\1\0\2\u0156"+
    "\1\0\1\u0156\1\0\3\u0157\1\0\1\u0158\20\0\2\u0158"+
    "\12\u0157\1\0\3\u0157\1\0\7\u0157\1\0\2\u0157\1\0"+
    "\1\u0158\1\0\3\u0158\1\0\1\u0158\20\0\14\u0158\1\0"+
    "\3\u0158\1\0\7\u0158\1\0\2\u0158\1\0\1\u0158\1\0"+
    "\3\u0159\1\0\1\u015a\20\0\2\u015a\12\u0159\1\0\3\u0159"+
    "\1\0\7\u0159\1\0\2\u0159\1\0\1\u015a\1\0\3\u015a"+
    "\1\0\1\u015a\20\0\14\u015a\1\0\3\u015a\1\0\7\u015a"+
    "\1\0\2\u015a\1\0\1\u015a\1\0\3\u015b\1\0\1\u015c"+
    "\20\0\2\u015c\12\u015b\1\0\3\u015b\1\0\7\u015b\1\0"+
    "\2\u015b\1\0\1\u015c\1\0\3\u015c\1\0\1\u015c\20\0"+
    "\14\u015c\1\0\3\u015c\1\0\7\u015c\1\0\2\u015c\1\0"+
    "\1\u015c\1\0\3\u015d\1\0\1\u015e\20\0\2\u015e\12\u015d"+
    "\1\0\3\u015d\1\0\7\u015d\1\0\2\u015d\1\0\1\u015e"+
    "\1\0\3\u015e\1\0\1\u015e\20\0\14\u015e\1\0\3\u015e"+
    "\1\0\7\u015e\1\0\2\u015e\1\0\1\u015e\1\0\3\u015f"+
    "\1\0\1\u0160\20\0\2\u0160\12\u015f\1\0\3\u015f\1\0"+
    "\7\u015f\1\0\2\u015f\1\0\1\u0160\1\0\3\u0160\1\0"+
    "\1\u0160\20\0\14\u0160\1\0\3\u0160\1\0\7\u0160\1\0"+
    "\2\u0160\1\0\1\u0160\1\0\3\u0161\1\0\1\u0162\20\0"+
    "\2\u0162\12\u0161\1\0\3\u0161\1\0\7\u0161\1\0\2\u0161"+
    "\1\0\1\u0162\1\0\3\u0162\1\0\1\u0162\20\0\14\u0162"+
    "\1\0\3\u0162\1\0\7\u0162\1\0\2\u0162\1\0\1\u0162"+
    "\1\0\3\u0163\1\0\1\u0164\20\0\2\u0164\12\u0163\1\0"+
    "\3\u0163\1\0\7\u0163\1\0\2\u0163\1\0\1\u0164\1\0"+
    "\3\u0164\1\0\1\u0164\20\0\14\u0164\1\0\3\u0164\1\0"+
    "\7\u0164\1\0\2\u0164\1\0\1\u0164\1\0\3\u0165\1\0"+
    "\1\u0166\20\0\2\u0166\12\u0165\1\0\3\u0165\1\0\7\u0165"+
    "\1\0\2\u0165\1\0\1\u0166\1\0\3\u0166\1\0\1\u0166"+
    "\20\0\14\u0166\1\0\3\u0166\1\0\7\u0166\1\0\2\u0166"+
    "\1\0\1\u0166\1\0\3\u0167\1\0\1\u0168\20\0\2\u0168"+
    "\12\u0167\1\0\3\u0167\1\0\7\u0167\1\0\2\u0167\1\0"+
    "\1\u0168\1\0\3\u0168\1\0\1\u0168\20\0\14\u0168\1\0"+
    "\3\u0168\1\0\7\u0168\1\0\2\u0168\1\0\1\u0168\1\0"+
    "\3\u0169\1\0\1\u016a\20\0\2\u016a\12\u0169\1\0\3\u0169"+
    "\1\0\7\u0169\1\0\2\u0169\1\0\1\u016a\1\0\3\u016a"+
    "\1\0\1\u016a\20\0\14\u016a\1\0\3\u016a\1\0\7\u016a"+
    "\1\0\2\u016a\1\0\1\u016a\1\0\3\u016b\1\0\1\u016c"+
    "\20\0\2\u016c\12\u016b\1\0\3\u016b\1\0\7\u016b\1\0"+
    "\2\u016b\1\0\1\u016c\1\0\3\u016c\1\0\1\u016c\20\0"+
    "\14\u016c\1\0\3\u016c\1\0\7\u016c\1\0\2\u016c\1\0"+
    "\1\u016c\1\0\3\u016d\1\0\1\u016e\20\0\2\u016e\12\u016d"+
    "\1\0\3\u016d\1\0\7\u016d\1\0\2\u016d\1\0\1\u016e"+
    "\1\0\3\u016e\1\0\1\u016e\20\0\14\u016e\1\0\3\u016e"+
    "\1\0\7\u016e\1\0\2\u016e\1\0\1\u016e\1\0\3\u016f"+
    "\1\0\1\u0170\20\0\2\u0170\12\u016f\1\0\3\u016f\1\0"+
    "\7\u016f\1\0\2\u016f\1\0\1\u0170\1\0\3\u0170\1\0"+
    "\1\u0170\20\0\14\u0170\1\0\3\u0170\1\0\7\u0170\1\0"+
    "\2\u0170\1\0\1\u0170\1\0\3\u0171\1\0\1\u0172\20\0"+
    "\2\u0172\12\u0171\1\0\3\u0171\1\0\7\u0171\1\0\2\u0171"+
    "\1\0\1\u0172\1\0\3\u0172\1\0\1\u0172\20\0\14\u0172"+
    "\1\0\3\u0172\1\0\7\u0172\1\0\2\u0172\1\0\1\u0172"+
    "\1\0\3\u0173\1\0\1\u0174\20\0\2\u0174\12\u0173\1\0"+
    "\3\u0173\1\0\7\u0173\1\0\2\u0173\1\0\1\u0174\1\0"+
    "\3\u0174\1\0\1\u0174\20\0\14\u0174\1\0\3\u0174\1\0"+
    "\7\u0174\1\0\2\u0174\1\0\1\u0174\1\0\3\u0175\1\0"+
    "\1\u0176\20\0\2\u0176\12\u0175\1\0\3\u0175\1\0\7\u0175"+
    "\1\0\2\u0175\1\0\1\u0176\1\0\3\u0176\1\0\1\u0176"+
    "\20\0\14\u0176\1\0\3\u0176\1\0\7\u0176\1\0\2\u0176"+
    "\1\0\1\u0176\1\0\3\u0177\1\0\1\u0178\20\0\2\u0178"+
    "\12\u0177\1\0\3\u0177\1\0\7\u0177\1\0\2\u0177\1\0"+
    "\1\u0178\1\0\3\u0178\1\0\1\u0178\20\0\14\u0178\1\0"+
    "\3\u0178\1\0\7\u0178\1\0\2\u0178\1\0\1\u0178\1\0"+
    "\3\u0179\1\0\1\u017a\20\0\2\u017a\12\u0179\1\0\3\u0179"+
    "\1\0\7\u0179\1\0\2\u0179\1\0\1\u017a\1\0\3\u017a"+
    "\1\0\1\u017a\20\0\14\u017a\1\0\3\u017a\1\0\7\u017a"+
    "\1\0\2\u017a\1\0\1\u017a\1\0\3\u017b\1\0\1\u017c"+
    "\20\0\2\u017c\12\u017b\1\0\3\u017b\1\0\7\u017b\1\0"+
    "\2\u017b\1\0\1\u017c\1\0\3\u017c\1\0\1\u017c\20\0"+
    "\14\u017c\1\0\3\u017c\1\0\7\u017c\1\0\2\u017c\1\0"+
    "\1\u017c\1\0\3\u017d\1\0\1\u017e\20\0\2\u017e\12\u017d"+
    "\1\0\3\u017d\1\0\7\u017d\1\0\2\u017d\1\0\1\u017e"+
    "\1\0\3\u017e\1\0\1\u017e\20\0\14\u017e\1\0\3\u017e"+
    "\1\0\7\u017e\1\0\2\u017e\1\0\1\u017e\1\0\3\u017f"+
    "\1\0\1\u0180\20\0\2\u0180\12\u017f\1\0\3\u017f\1\0"+
    "\7\u017f\1\0\2\u017f\1\0\1\u0180\1\0\3\u0180\1\0"+
    "\1\u0180\20\0\14\u0180\1\0\3\u0180\1\0\7\u0180\1\0"+
    "\2\u0180\1\0\1\u0180\1\0\3\u0181\1\0\1\u0182\20\0"+
    "\2\u0182\12\u0181\1\0\3\u0181\1\0\7\u0181\1\0\2\u0181"+
    "\1\0\1\u0182\1\0\3\u0182\1\0\1\u0182\20\0\14\u0182"+
    "\1\0\3\u0182\1\0\7\u0182\1\0\2\u0182\1\0\1\u0182"+
    "\1\0\3\u0183\1\0\1\u0184\20\0\2\u0184\12\u0183\1\0"+
    "\3\u0183\1\0\7\u0183\1\0\2\u0183\1\0\1\u0184\1\0"+
    "\3\u0184\1\0\1\u0184\20\0\14\u0184\1\0\3\u0184\1\0"+
    "\7\u0184\1\0\2\u0184\1\0\1\u0184\1\0\3\u0185\1\0"+
    "\1\u0186\20\0\2\u0186\12\u0185\1\0\3\u0185\1\0\7\u0185"+
    "\1\0\2\u0185\1\0\1\u0186\1\0\3\u0186\1\0\1\u0186"+
    "\20\0\14\u0186\1\0\3\u0186\1\0\7\u0186\1\0\2\u0186"+
    "\1\0\1\u0186\1\0\3\u0187\1\0\1\u0188\20\0\2\u0188"+
    "\12\u0187\1\0\3\u0187\1\0\7\u0187\1\0\2\u0187\1\0"+
    "\1\u0188\1\0\3\u0188\1\0\1\u0188\20\0\14\u0188\1\0"+
    "\3\u0188\1\0\7\u0188\1\0\2\u0188\1\0\1\u0188\1\0"+
    "\3\u0189\1\0\1\u018a\20\0\2\u018a\12\u0189\1\0\3\u0189"+
    "\1\0\7\u0189\1\0\2\u0189\1\0\1\u018a\1\0\3\u018a"+
    "\1\0\1\u018a\20\0\14\u018a\1\0\3\u018a\1\0\7\u018a"+
    "\1\0\2\u018a\1\0\1\u018a\1\0\3\u018b\1\0\1\u018c"+
    "\20\0\2\u018c\12\u018b\1\0\3\u018b\1\0\7\u018b\1\0"+
    "\2\u018b\1\0\1\u018c\1\0\3\u018c\1\0\1\u018c\20\0"+
    "\14\u018c\1\0\3\u018c\1\0\7\u018c\1\0\2\u018c\1\0"+
    "\1\u018c\1\0\3\u018d\1\0\1\u018e\20\0\2\u018e\12\u018d"+
    "\1\0\3\u018d\1\0\7\u018d\1\0\2\u018d\1\0\1\u018e"+
    "\1\0\3\u018e\1\0\1\u018e\20\0\14\u018e\1\0\3\u018e"+
    "\1\0\7\u018e\1\0\2\u018e\1\0\1\u018e\1\0\3\u018f"+
    "\1\0\1\u0190\20\0\2\u0190\12\u018f\1\0\3\u018f\1\0"+
    "\7\u018f\1\0\2\u018f\1\0\1\u0190\1\0\3\u0190\1\0"+
    "\1\u0190\20\0\14\u0190\1\0\3\u0190\1\0\7\u0190\1\0"+
    "\2\u0190\1\0\1\u0190\1\0\3\u0191\1\0\1\u0192\20\0"+
    "\2\u0192\12\u0191\1\0\3\u0191\1\0\7\u0191\1\0\2\u0191"+
    "\1\0\1\u0192\1\0\3\u0192\1\0\1\u0192\20\0\14\u0192"+
    "\1\0\3\u0192\1\0\7\u0192\1\0\2\u0192\1\0\1\u0192"+
    "\1\0\3\u0193\1\0\1\u0194\20\0\2\u0194\12\u0193\1\0"+
    "\3\u0193\1\0\7\u0193\1\0\2\u0193\1\0\1\u0194\1\0"+
    "\3\u0194\1\0\1\u0194\20\0\14\u0194\1\0\3\u0194\1\0"+
    "\7\u0194\1\0\2\u0194\1\0\1\u0194\1\0\3\u0195\1\0"+
    "\1\u0196\20\0\2\u0196\12\u0195\1\0\3\u0195\1\0\7\u0195"+
    "\1\0\2\u0195\1\0\1\u0196\1\0\3\u0196\1\0\1\u0196"+
    "\20\0\14\u0196\1\0\3\u0196\1\0\7\u0196\1\0\2\u0196"+
    "\1\0\1\u0196\1\0\3\u0197\1\0\1\u0198\20\0\2\u0198"+
    "\12\u0197\1\0\3\u0197\1\0\7\u0197\1\0\2\u0197\1\0"+
    "\1\u0198\1\0\3\u0198\1\0\1\u0198\20\0\14\u0198\1\0"+
    "\3\u0198\1\0\7\u0198\1\0\2\u0198\1\0\1\u0198\1\0"+
    "\3\u0199\1\0\1\u019a\20\0\2\u019a\12\u0199\1\0\3\u0199"+
    "\1\0\7\u0199\1\0\2\u0199\1\0\1\u019a\1\0\3\u019a"+
    "\1\0\1\u019a\20\0\14\u019a\1\0\3\u019a\1\0\7\u019a"+
    "\1\0\2\u019a\1\0\1\u019a\1\0\3\u019b\1\0\1\u019c"+
    "\20\0\2\u019c\12\u019b\1\0\3\u019b\1\0\7\u019b\1\0"+
    "\2\u019b\1\0\1\u019c\1\0\3\u019c\1\0\1\u019c\20\0"+
    "\14\u019c\1\0\3\u019c\1\0\7\u019c\1\0\2\u019c\1\0"+
    "\1\u019c\1\0\3\u019d\1\0\1\u019e\20\0\2\u019e\12\u019d"+
    "\1\0\3\u019d\1\0\7\u019d\1\0\2\u019d\1\0\1\u019e"+
    "\1\0\3\u019e\1\0\1\u019e\20\0\14\u019e\1\0\3\u019e"+
    "\1\0\7\u019e\1\0\2\u019e\1\0\1\u019e\1\0\3\u019f"+
    "\1\0\1\u01a0\20\0\2\u01a0\12\u019f\1\0\3\u019f\1\0"+
    "\7\u019f\1\0\2\u019f\1\0\1\u01a0\1\0\3\u01a0\1\0"+
    "\1\u01a0\20\0\14\u01a0\1\0\3\u01a0\1\0\7\u01a0\1\0"+
    "\2\u01a0\1\0\1\u01a0\1\0\3\u01a1\1\0\1\u01a2\20\0"+
    "\2\u01a2\12\u01a1\1\0\3\u01a1\1\0\7\u01a1\1\0\2\u01a1"+
    "\1\0\1\u01a2\1\0\3\u01a2\1\0\1\u01a2\20\0\14\u01a2"+
    "\1\0\3\u01a2\1\0\7\u01a2\1\0\2\u01a2\1\0\1\u01a2"+
    "\1\0\3\u01a3\1\0\1\u01a4\20\0\2\u01a4\12\u01a3\1\0"+
    "\3\u01a3\1\0\7\u01a3\1\0\2\u01a3\1\0\1\u01a4\1\0"+
    "\3\u01a4\1\0\1\u01a4\20\0\14\u01a4\1\0\3\u01a4\1\0"+
    "\7\u01a4\1\0\2\u01a4\1\0\1\u01a4\1\0\3\u01a5\1\0"+
    "\1\u01a6\20\0\2\u01a6\12\u01a5\1\0\3\u01a5\1\0\7\u01a5"+
    "\1\0\2\u01a5\1\0\1\u01a6\1\0\3\u01a6\1\0\1\u01a6"+
    "\20\0\14\u01a6\1\0\3\u01a6\1\0\7\u01a6\1\0\2\u01a6"+
    "\1\0\1\u01a6\1\0\3\u01a7\1\0\1\u01a8\20\0\2\u01a8"+
    "\12\u01a7\1\0\3\u01a7\1\0\7\u01a7\1\0\2\u01a7\1\0"+
    "\1\u01a8\1\0\3\u01a8\1\0\1\u01a8\20\0\14\u01a8\1\0"+
    "\3\u01a8\1\0\7\u01a8\1\0\2\u01a8\1\0\1\u01a8\1\0"+
    "\3\u01a9\1\0\1\u01aa\20\0\2\u01aa\12\u01a9\1\0\3\u01a9"+
    "\1\0\7\u01a9\1\0\2\u01a9\1\0\1\u01aa\1\0\3\u01aa"+
    "\1\0\1\u01aa\20\0\14\u01aa\1\0\3\u01aa\1\0\7\u01aa"+
    "\1\0\2\u01aa\1\0\1\u01aa\1\0\3\u01ab\1\0\1\u01ac"+
    "\20\0\2\u01ac\12\u01ab\1\0\3\u01ab\1\0\7\u01ab\1\0"+
    "\2\u01ab\1\0\1\u01ac\1\0\3\u01ac\1\0\1\u01ac\20\0"+
    "\14\u01ac\1\0\3\u01ac\1\0\7\u01ac\1\0\2\u01ac\1\0"+
    "\1\u01ac\1\0\3\u01ad\1\0\1\u01ae\20\0\2\u01ae\12\u01ad"+
    "\1\0\3\u01ad\1\0\7\u01ad\1\0\2\u01ad\1\0\1\u01ae"+
    "\1\0\3\u01ae\1\0\1\u01ae\20\0\14\u01ae\1\0\3\u01ae"+
    "\1\0\7\u01ae\1\0\2\u01ae\1\0\1\u01ae\1\0\3\u01af"+
    "\1\0\1\u01b0\20\0\2\u01b0\12\u01af\1\0\3\u01af\1\0"+
    "\7\u01af\1\0\2\u01af\1\0\1\u01b0\1\0\3\u01b0\1\0"+
    "\1\u01b0\20\0\14\u01b0\1\0\3\u01b0\1\0\7\u01b0\1\0"+
    "\2\u01b0\1\0\1\u01b0\1\0\3\u01b1\1\0\1\u01b2\20\0"+
    "\2\u01b2\12\u01b1\1\0\3\u01b1\1\0\7\u01b1\1\0\2\u01b1"+
    "\1\0\1\u01b2\1\0\3\u01b2\1\0\1\u01b2\20\0\14\u01b2"+
    "\1\0\3\u01b2\1\0\7\u01b2\1\0\2\u01b2\1\0\1\u01b2"+
    "\1\0\3\u01b3\1\0\1\u01b4\20\0\2\u01b4\12\u01b3\1\0"+
    "\3\u01b3\1\0\7\u01b3\1\0\2\u01b3\1\0\1\u01b4\1\0"+
    "\3\u01b4\1\0\1\u01b4\20\0\14\u01b4\1\0\3\u01b4\1\0"+
    "\7\u01b4\1\0\2\u01b4\1\0\1\u01b4\1\0\3\u01b5\1\0"+
    "\1\u01b6\20\0\2\u01b6\12\u01b5\1\0\3\u01b5\1\0\7\u01b5"+
    "\1\0\2\u01b5\1\0\1\u01b6\1\0\3\u01b6\1\0\1\u01b6"+
    "\20\0\14\u01b6\1\0\3\u01b6\1\0\7\u01b6\1\0\2\u01b6"+
    "\1\0\1\u01b6\1\0\3\u01b7\1\0\1\u01b8\20\0\2\u01b8"+
    "\12\u01b7\1\0\3\u01b7\1\0\7\u01b7\1\0\2\u01b7\1\0"+
    "\1\u01b8\1\0\3\u01b8\1\0\1\u01b8\20\0\14\u01b8\1\0"+
    "\3\u01b8\1\0\7\u01b8\1\0\2\u01b8\1\0\1\u01b8\1\0"+
    "\3\u01b9\1\0\1\u01ba\20\0\2\u01ba\12\u01b9\1\0\3\u01b9"+
    "\1\0\7\u01b9\1\0\2\u01b9\1\0\1\u01ba\1\0\3\u01ba"+
    "\1\0\1\u01ba\20\0\14\u01ba\1\0\3\u01ba\1\0\7\u01ba"+
    "\1\0\2\u01ba\1\0\1\u01ba\1\0\3\u01bb\1\0\1\u01bc"+
    "\20\0\2\u01bc\12\u01bb\1\0\3\u01bb\1\0\7\u01bb\1\0"+
    "\2\u01bb\1\0\1\u01bc\1\0\3\u01bc\1\0\1\u01bc\20\0"+
    "\14\u01bc\1\0\3\u01bc\1\0\7\u01bc\1\0\2\u01bc\1\0"+
    "\1\u01bc\1\0\3\u01bd\1\0\1\u01be\20\0\2\u01be\12\u01bd"+
    "\1\0\3\u01bd\1\0\7\u01bd\1\0\2\u01bd\1\0\1\u01be"+
    "\1\0\3\u01be\1\0\1\u01be\20\0\14\u01be\1\0\3\u01be"+
    "\1\0\7\u01be\1\0\2\u01be\1\0\1\u01be\1\0\3\u01bf"+
    "\1\0\1\u01c0\20\0\2\u01c0\12\u01bf\1\0\3\u01bf\1\0"+
    "\7\u01bf\1\0\2\u01bf\1\0\1\u01c0\1\0\3\u01c0\1\0"+
    "\1\u01c0\20\0\14\u01c0\1\0\3\u01c0\1\0\7\u01c0\1\0"+
    "\2\u01c0\1\0\1\u01c0\1\0\3\u01c1\1\0\1\u01c2\20\0"+
    "\2\u01c2\12\u01c1\1\0\3\u01c1\1\0\7\u01c1\1\0\2\u01c1"+
    "\1\0\1\u01c2\1\0\3\u01c2\1\0\1\u01c2\20\0\14\u01c2"+
    "\1\0\3\u01c2\1\0\7\u01c2\1\0\2\u01c2\1\0\1\u01c2"+
    "\1\0\3\u01c3\1\0\1\u01c4\20\0\2\u01c4\12\u01c3\1\0"+
    "\3\u01c3\1\0\7\u01c3\1\0\2\u01c3\1\0\1\u01c4\1\0"+
    "\3\u01c4\1\0\1\u01c4\20\0\14\u01c4\1\0\3\u01c4\1\0"+
    "\7\u01c4\1\0\2\u01c4\1\0\1\u01c4\1\0\3\u01c5\1\0"+
    "\1\u01c6\20\0\2\u01c6\12\u01c5\1\0\3\u01c5\1\0\7\u01c5"+
    "\1\0\2\u01c5\1\0\1\u01c6\1\0\3\u01c6\1\0\1\u01c6"+
    "\20\0\14\u01c6\1\0\3\u01c6\1\0\7\u01c6\1\0\2\u01c6"+
    "\1\0\1\u01c6\1\0\3\u01c7\1\0\1\u01c8\20\0\2\u01c8"+
    "\12\u01c7\1\0\3\u01c7\1\0\7\u01c7\1\0\2\u01c7\1\0"+
    "\1\u01c8\1\0\3\u01c8\1\0\1\u01c8\20\0\14\u01c8\1\0"+
    "\3\u01c8\1\0\7\u01c8\1\0\2\u01c8\1\0\1\u01c8\1\0"+
    "\3\u01c9\1\0\1\u01ca\20\0\2\u01ca\12\u01c9\1\0\3\u01c9"+
    "\1\0\7\u01c9\1\0\2\u01c9\1\0\1\u01ca\1\0\3\u01ca"+
    "\1\0\1\u01ca\20\0\14\u01ca\1\0\3\u01ca\1\0\7\u01ca"+
    "\1\0\2\u01ca\1\0\1\u01ca\1\0\3\u01cb\1\0\1\u01cc"+
    "\20\0\2\u01cc\12\u01cb\1\0\3\u01cb\1\0\7\u01cb\1\0"+
    "\2\u01cb\1\0\1\u01cc\1\0\3\u01cc\1\0\1\u01cc\20\0"+
    "\14\u01cc\1\0\3\u01cc\1\0\7\u01cc\1\0\2\u01cc\1\0"+
    "\1\u01cc\1\0\3\u01cd\1\0\1\u01ce\20\0\2\u01ce\12\u01cd"+
    "\1\0\3\u01cd\1\0\7\u01cd\1\0\2\u01cd\1\0\1\u01ce"+
    "\1\0\3\u01ce\1\0\1\u01ce\20\0\14\u01ce\1\0\3\u01ce"+
    "\1\0\7\u01ce\1\0\2\u01ce\1\0\1\u01ce\1\0\3\u01cf"+
    "\1\0\1\u01d0\20\0\2\u01d0\12\u01cf\1\0\3\u01cf\1\0"+
    "\7\u01cf\1\0\2\u01cf\1\0\1\u01d0\1\0\3\u01d0\1\0"+
    "\1\u01d0\20\0\14\u01d0\1\0\3\u01d0\1\0\7\u01d0\1\0"+
    "\2\u01d0\1\0\1\u01d0\1\0\3\u01d1\1\0\1\u01d2\20\0"+
    "\2\u01d2\12\u01d1\1\0\3\u01d1\1\0\7\u01d1\1\0\2\u01d1"+
    "\1\0\1\u01d2\1\0\3\u01d2\1\0\1\u01d2\20\0\14\u01d2"+
    "\1\0\3\u01d2\1\0\7\u01d2\1\0\2\u01d2\1\0\1\u01d2"+
    "\1\0\3\u01d3\1\0\1\u01d4\20\0\2\u01d4\12\u01d3\1\0"+
    "\3\u01d3\1\0\7\u01d3\1\0\2\u01d3\1\0\1\u01d4\1\0"+
    "\3\u01d4\1\0\1\u01d4\20\0\14\u01d4\1\0\3\u01d4\1\0"+
    "\7\u01d4\1\0\2\u01d4\1\0\1\u01d4\1\0\3\u01d5\1\0"+
    "\1\u01d6\20\0\2\u01d6\12\u01d5\1\0\3\u01d5\1\0\7\u01d5"+
    "\1\0\2\u01d5\1\0\1\u01d6\1\0\3\u01d6\1\0\1\u01d6"+
    "\20\0\14\u01d6\1\0\3\u01d6\1\0\7\u01d6\1\0\2\u01d6"+
    "\1\0\1\u01d6\1\0\3\u01d7\1\0\1\u01d8\20\0\2\u01d8"+
    "\12\u01d7\1\0\3\u01d7\1\0\7\u01d7\1\0\2\u01d7\1\0"+
    "\1\u01d8\1\0\3\u01d8\1\0\1\u01d8\20\0\14\u01d8\1\0"+
    "\3\u01d8\1\0\7\u01d8\1\0\2\u01d8\1\0\1\u01d8\1\0"+
    "\3\u01d9\1\0\1\u01da\20\0\2\u01da\12\u01d9\1\0\3\u01d9"+
    "\1\0\7\u01d9\1\0\2\u01d9\1\0\1\u01da\1\0\3\u01da"+
    "\1\0\1\u01da\20\0\14\u01da\1\0\3\u01da\1\0\7\u01da"+
    "\1\0\2\u01da\1\0\1\u01da\1\0\3\u01db\1\0\1\u01dc"+
    "\20\0\2\u01dc\12\u01db\1\0\3\u01db\1\0\7\u01db\1\0"+
    "\2\u01db\1\0\1\u01dc\1\0\3\u01dc\1\0\1\u01dc\20\0"+
    "\14\u01dc\1\0\3\u01dc\1\0\7\u01dc\1\0\2\u01dc\1\0"+
    "\1\u01dc";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22593];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\4\1\2\11\5\1\3\11"+
    "\37\1\1\0\5\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\3\0\5\1\1\0\4\1\1\0\2\1"+
    "\1\0\6\1\1\11\7\1\3\0\4\1\1\0\5\1"+
    "\2\0\3\1\1\0\2\1\1\0\1\1\1\0\1\11"+
    "\1\0\1\11\3\0\14\1\1\0\4\1\2\0\2\1"+
    "\1\0\1\1\1\0\14\1\2\0\1\1\3\0\1\11"+
    "\7\1\1\0\2\1\1\0\3\1\2\0\2\1\1\0"+
    "\10\1\2\0\7\1\1\0\1\1\2\0\2\1\1\0"+
    "\4\1\1\0\1\1\1\0\u0100\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[476];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int line;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 288) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); line=yyline; return ERROR;
            }
          case 34: break;
          case 2: 
            { lexeme=yytext(); line=yyline; return IDENTIFICADOR;
            }
          case 35: break;
          case 3: 
            { lexeme=yytext(); line=yyline; return LITERAL_NUM_ENTERO;
            }
          case 36: break;
          case 4: 
            { /*No se procesa*/
            }
          case 37: break;
          case 5: 
            { lexeme=yytext(); line=yyline; return OPERADOR_MULTIPLICACION;
            }
          case 38: break;
          case 6: 
            { lexeme=yytext(); line=yyline; return OPERADOR_ADICION;
            }
          case 39: break;
          case 7: 
            { lexeme=yytext(); line=yyline; return OPERADOR_SUSTRACCION;
            }
          case 40: break;
          case 8: 
            { lexeme=yytext(); line=yyline; return OPERADOR_DIVISION;
            }
          case 41: break;
          case 9: 
            { lexeme=yytext(); line=yyline; return OPERADOR_ASIGNACION;
            }
          case 42: break;
          case 10: 
            { lexeme=yytext(); line=yyline; return OPERADOR;
            }
          case 43: break;
          case 11: 
            { lexeme=yytext(); line=yyline; return OPERADOR_MENOR_QUE;
            }
          case 44: break;
          case 12: 
            { lexeme=yytext(); line=yyline; return OPERADOR_MAYOR_QUE;
            }
          case 45: break;
          case 13: 
            { lexeme=yytext(); line=yyline; return OPERADOR_PARENTESIS_ABRIR;
            }
          case 46: break;
          case 14: 
            { lexeme=yytext(); line=yyline; return OPERADOR_PARENTESIS_CERRAR;
            }
          case 47: break;
          case 15: 
            { lexeme=yytext(); line=yyline; return OPERADOR_CORCHETE_ABRIR;
            }
          case 48: break;
          case 16: 
            { lexeme=yytext(); line=yyline; return OPERADOR_CORCHETE_CERRAR;
            }
          case 49: break;
          case 17: 
            { lexeme=yytext(); line=yyline; return ERROR_IDENTIFICADOR;
            }
          case 50: break;
          case 18: 
            { lexeme=yytext(); line=yyline; return OPERADOR_ASIGNACION_MULTIPLICACION;
            }
          case 51: break;
          case 19: 
            { lexeme=yytext(); line=yyline; return OPERADOR_INCREMENTO;
            }
          case 52: break;
          case 20: 
            { lexeme=yytext(); line=yyline; return OPERADOR_ASIGNACION_ADICION;
            }
          case 53: break;
          case 21: 
            { lexeme=yytext(); line=yyline; return OPERADOR_DISMINUCION;
            }
          case 54: break;
          case 22: 
            { lexeme=yytext(); line=yyline; return OPERADOR_ASIGNACION_SUSTRACCION;
            }
          case 55: break;
          case 23: 
            { lexeme=yytext(); line=yyline; return OPERADOR_ASIGNACION_DIVISION;
            }
          case 56: break;
          case 24: 
            { lexeme=yytext(); line=yyline; return ERROR_LITERAL;
            }
          case 57: break;
          case 25: 
            { lexeme=yytext(); line=yyline; return OPERADOR_MENOR_IGUAL_QUE;
            }
          case 58: break;
          case 26: 
            { lexeme=yytext(); line=yyline; return OPERADOR_DESPLAZAMIENTO_IZQUIERDA;
            }
          case 59: break;
          case 27: 
            { lexeme=yytext(); line=yyline; return OPERADOR_MAYOR_IGUAL_QUE;
            }
          case 60: break;
          case 28: 
            { lexeme=yytext(); line=yyline; return OPERADOR_DESPLAZAMIENTO_DERECHA;
            }
          case 61: break;
          case 29: 
            { lexeme=yytext(); line=yyline; return PALABRA_RESERVADA;
            }
          case 62: break;
          case 30: 
            { lexeme=yytext(); line=yyline; return LITERAL_NUM_FLOTANTE;
            }
          case 63: break;
          case 31: 
            { lexeme=yytext(); line=yyline; return OPERADOR_ASIGNACION_DESPLAZAMIENTO_DERECHA;
            }
          case 64: break;
          case 32: 
            { lexeme=yytext(); line=yyline; return OPERADOR_ASIGNACION_DESPLAZAMIENTO_IZQUIERDA;
            }
          case 65: break;
          case 33: 
            { lexeme=yytext(); line=yyline; return LITERAL_STRING;
            }
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
