/* The following code was generated by JFlex 1.6.1 */

package analizador;
import jdk.nashorn.internal.ir.LiteralNode;import static analizador.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/jose_/Documents/GitHub/AnalizadorLexico/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\30\1\31\1\31\1\30\22\0\1\4\1\12\1\65"+
    "\1\11\1\12\1\13\1\12\1\0\1\14\1\15\1\5\1\6\1\21"+
    "\1\7\1\22\1\10\12\3\1\23\1\21\1\26\1\16\1\27\1\12"+
    "\1\0\1\42\1\47\1\1\1\44\1\32\1\34\1\50\1\55\1\51"+
    "\1\2\1\63\1\52\1\61\1\43\1\33\1\62\1\2\1\45\1\54"+
    "\1\53\1\60\1\56\1\57\1\64\1\46\1\2\1\24\1\0\1\25"+
    "\1\0\1\2\1\0\1\36\1\2\1\35\1\2\1\40\6\2\1\41"+
    "\6\2\1\37\7\2\1\17\1\0\1\20\7\0\1\31\33\0\1\12"+
    "\u1f86\0\1\31\1\31\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\1\1\10\1\11\1\12\1\1\2\13\1\14\1\15"+
    "\1\16\1\17\24\1\4\20\1\2\1\0\1\21\1\22"+
    "\1\23\1\24\1\25\1\3\1\26\5\0\1\3\1\27"+
    "\1\30\1\31\1\32\1\20\1\33\7\20\1\33\6\20"+
    "\1\33\16\20\1\0\1\34\4\20\1\0\1\35\1\34"+
    "\4\0\1\36\1\0\1\37\2\33\30\20\1\33\1\35"+
    "\1\0\1\1\2\0\1\2\1\0\22\20\1\33\2\0"+
    "\15\20\2\0\2\20\1\33\6\20\1\0\1\33\4\20"+
    "\1\0\1\33\2\20\1\0\1\33\1\20\1\0\1\20"+
    "\1\0\1\20\1\33\164\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\66\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\66\0\66\0\u0288"+
    "\0\66\0\u02be\0\66\0\66\0\u02f4\0\u032a\0\u0360\0\u0396"+
    "\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546"+
    "\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6"+
    "\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6"+
    "\0\66\0\66\0\66\0\66\0\66\0\u08dc\0\66\0\u0912"+
    "\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u09ea\0\66\0\u0a20\0\66"+
    "\0\u0a56\0\u0a8c\0\u0798\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa"+
    "\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa"+
    "\0\u0762\0\66\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee"+
    "\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\66\0\u1332\0\66"+
    "\0\u10e0\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac"+
    "\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c"+
    "\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c"+
    "\0\u1842\0\u1878\0\u1842\0\u11b8\0\u18ae\0\u1224\0\u18e4\0\u191a"+
    "\0\66\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94"+
    "\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44"+
    "\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe"+
    "\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e"+
    "\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e"+
    "\0\u2046\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298"+
    "\0\u2262\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u2370\0\u23dc"+
    "\0\u2412\0\u2448\0\u2412\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556"+
    "\0\66\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0"+
    "\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a\0\u2880"+
    "\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30"+
    "\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\u2be0"+
    "\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90"+
    "\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40"+
    "\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084\0\u30ba\0\u30f0"+
    "\0\u3126\0\u315c\0\u3192\0\u31c8\0\u31fe\0\u3234\0\u326a\0\u32a0"+
    "\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae\0\u33e4\0\u341a\0\u3450"+
    "\0\u3486\0\u34bc\0\u34f2\0\u3528\0\u355e\0\u3594\0\u35ca\0\u3600"+
    "\0\u3636\0\u366c\0\u36a2\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0"+
    "\0\u37e6\0\u381c\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960"+
    "\0\u3996\0\u39cc\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10"+
    "\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0"+
    "\0\u3cf6\0\u3d2c\0\u3d62\0\u3d98\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\2\1\14\1\15\1\16\1\17\1\20"+
    "\1\2\2\21\1\22\1\23\1\24\1\25\1\26\1\6"+
    "\1\0\1\27\1\30\1\31\5\4\1\32\1\33\1\34"+
    "\1\35\1\4\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\4\1\44\1\45\1\46\1\47\1\50\1\4\1\51"+
    "\1\52\67\0\3\53\26\0\1\53\1\54\6\53\1\55"+
    "\12\53\1\56\7\53\2\0\3\53\26\0\33\53\4\0"+
    "\1\57\16\0\1\60\61\0\1\61\55\0\1\62\7\0"+
    "\1\63\56\0\1\64\6\0\1\65\57\0\1\66\5\0"+
    "\1\67\52\0\1\70\117\0\1\71\35\0\1\72\1\0"+
    "\1\73\56\0\5\74\1\0\12\74\1\75\45\74\16\0"+
    "\1\17\65\0\1\76\7\0\1\77\1\21\54\0\1\100"+
    "\10\0\1\101\37\0\3\53\26\0\11\53\1\102\6\53"+
    "\1\55\12\53\2\0\3\53\26\0\2\53\1\103\10\53"+
    "\1\103\17\53\2\0\3\53\26\0\1\53\1\104\6\53"+
    "\1\105\6\53\1\106\6\53\1\107\4\53\2\0\3\53"+
    "\26\0\13\53\1\110\17\53\2\0\3\53\26\0\1\53"+
    "\1\111\15\53\1\112\13\53\2\0\3\53\26\0\1\53"+
    "\1\113\15\53\1\114\13\53\2\0\3\53\26\0\1\115"+
    "\32\53\2\0\3\53\26\0\1\116\1\117\12\53\1\120"+
    "\16\53\2\0\3\53\26\0\1\53\1\121\31\53\2\0"+
    "\3\53\26\0\2\53\1\103\6\53\1\122\21\53\2\0"+
    "\3\53\26\0\1\53\1\123\6\53\1\124\22\53\2\0"+
    "\3\53\26\0\1\53\1\103\11\53\1\125\1\126\6\53"+
    "\1\127\7\53\2\0\3\53\26\0\1\111\20\53\1\130"+
    "\1\53\1\131\7\53\2\0\3\53\26\0\10\53\1\132"+
    "\22\53\2\0\3\53\26\0\13\53\1\133\3\53\1\134"+
    "\3\53\1\135\7\53\2\0\3\53\26\0\11\53\1\136"+
    "\21\53\2\0\3\53\26\0\1\53\1\102\31\53\2\0"+
    "\3\53\26\0\10\53\1\137\2\53\1\140\17\53\2\0"+
    "\3\53\26\0\1\53\1\132\31\53\2\0\30\141\1\0"+
    "\33\141\1\142\1\0\3\143\26\0\33\143\2\0\3\143"+
    "\26\0\11\143\1\144\21\143\2\0\3\143\26\0\22\143"+
    "\1\145\10\143\2\0\3\143\26\0\10\143\1\146\22\143"+
    "\4\0\1\57\16\0\1\147\46\0\1\150\62\0\30\66"+
    "\2\0\34\66\3\0\1\151\120\0\1\152\27\0\5\153"+
    "\1\154\60\153\3\0\1\155\62\0\20\74\1\6\45\74"+
    "\16\0\1\156\13\0\1\157\51\0\1\160\50\0\3\143"+
    "\26\0\12\143\1\161\20\143\2\0\3\143\26\0\13\143"+
    "\1\162\17\143\2\0\3\143\26\0\20\143\1\163\12\143"+
    "\2\0\3\143\26\0\20\143\1\145\12\143\2\0\3\143"+
    "\26\0\11\143\1\164\21\143\2\0\3\143\26\0\13\143"+
    "\1\165\17\143\2\0\3\143\26\0\21\143\1\161\11\143"+
    "\2\0\3\143\26\0\20\143\1\161\12\143\2\0\3\143"+
    "\26\0\25\143\1\166\5\143\2\0\3\143\26\0\24\143"+
    "\1\161\6\143\2\0\1\167\2\143\26\0\10\143\1\170"+
    "\17\143\1\171\2\143\2\0\3\143\26\0\16\143\1\172"+
    "\14\143\2\0\3\143\26\0\1\143\1\173\31\143\2\0"+
    "\3\143\26\0\21\143\1\145\11\143\2\0\3\143\26\0"+
    "\21\143\1\174\11\143\2\0\3\143\26\0\20\143\1\175"+
    "\1\161\11\143\2\0\3\143\26\0\11\143\1\176\21\143"+
    "\2\0\3\143\26\0\15\143\1\177\15\143\2\0\3\143"+
    "\26\0\26\143\1\145\4\143\2\0\3\143\26\0\30\143"+
    "\1\145\2\143\2\0\3\143\26\0\1\200\32\143\2\0"+
    "\3\143\26\0\13\143\1\201\17\143\2\0\3\143\26\0"+
    "\1\143\1\202\31\143\2\0\3\143\26\0\13\143\1\161"+
    "\17\143\2\0\3\143\26\0\17\143\1\203\13\143\2\0"+
    "\3\143\26\0\21\143\1\204\11\143\2\0\3\143\26\0"+
    "\17\143\1\205\13\143\2\0\3\143\26\0\21\143\1\206"+
    "\11\143\2\0\1\207\2\143\26\0\33\143\2\0\3\143"+
    "\26\0\1\143\1\210\31\143\2\0\3\211\26\0\33\211"+
    "\2\0\3\211\26\0\22\211\1\212\10\211\2\0\3\211"+
    "\26\0\1\213\32\211\2\0\3\211\26\0\13\211\1\213"+
    "\17\211\4\0\1\214\65\0\1\150\26\0\1\215\5\0"+
    "\1\215\30\0\1\216\121\0\1\217\26\0\5\153\1\220"+
    "\60\153\5\0\1\154\7\0\1\6\53\0\1\155\11\0"+
    "\1\221\103\0\1\222\33\0\3\211\26\0\25\211\1\223"+
    "\5\211\2\0\3\211\26\0\22\211\1\224\10\211\2\0"+
    "\1\225\2\211\26\0\33\211\2\0\3\211\26\0\10\211"+
    "\1\226\22\211\2\0\3\211\26\0\11\211\1\227\21\211"+
    "\2\0\3\211\26\0\1\211\1\230\31\211\2\0\3\211"+
    "\26\0\12\211\1\213\5\211\1\213\12\211\2\0\3\211"+
    "\26\0\1\231\32\211\2\0\3\211\26\0\17\211\1\232"+
    "\13\211\2\0\3\211\26\0\20\211\1\233\12\211\2\0"+
    "\3\211\26\0\1\211\1\213\31\211\2\0\3\211\26\0"+
    "\17\211\1\234\13\211\2\0\3\211\26\0\16\211\1\235"+
    "\14\211\2\0\3\211\26\0\1\236\32\211\2\0\3\211"+
    "\26\0\11\211\1\213\21\211\2\0\3\211\26\0\17\211"+
    "\1\237\13\211\2\0\3\211\26\0\13\211\1\240\17\211"+
    "\2\0\3\211\26\0\21\211\1\224\11\211\2\0\3\211"+
    "\26\0\23\211\1\213\7\211\2\0\3\211\26\0\20\211"+
    "\1\224\12\211\2\0\3\211\26\0\17\211\1\236\13\211"+
    "\2\0\3\211\26\0\31\211\1\241\1\211\2\0\1\242"+
    "\2\211\26\0\16\211\1\243\14\211\2\0\3\244\26\0"+
    "\33\244\2\0\3\244\26\0\21\244\1\245\11\244\4\0"+
    "\1\214\3\0\1\147\116\0\1\246\25\0\5\153\1\220"+
    "\7\153\1\6\50\153\34\0\1\247\32\0\3\244\26\0"+
    "\10\244\1\250\22\244\2\0\3\244\26\0\1\245\32\244"+
    "\2\0\3\244\26\0\21\244\1\251\11\244\2\0\3\244"+
    "\26\0\14\244\1\245\16\244\2\0\3\244\26\0\21\244"+
    "\1\252\11\244\2\0\3\244\26\0\13\244\1\253\17\244"+
    "\2\0\3\244\26\0\10\244\1\254\22\244\2\0\3\244"+
    "\26\0\11\244\1\245\21\244\2\0\3\244\26\0\1\255"+
    "\32\244\2\0\3\244\26\0\11\244\1\256\21\244\2\0"+
    "\3\244\26\0\17\244\1\257\13\244\2\0\3\244\26\0"+
    "\20\244\1\245\12\244\2\0\3\244\26\0\11\244\1\260"+
    "\21\244\2\0\3\244\26\0\21\244\1\261\11\244\2\0"+
    "\3\244\26\0\1\253\32\244\2\0\3\244\26\0\1\262"+
    "\32\244\2\0\3\244\26\0\13\244\1\263\17\244\2\0"+
    "\3\264\26\0\33\264\42\0\1\265\53\0\1\266\37\0"+
    "\3\264\26\0\13\264\1\267\17\264\2\0\3\264\26\0"+
    "\17\264\1\270\13\264\2\0\3\264\26\0\1\264\1\271"+
    "\31\264\2\0\3\264\26\0\12\264\1\271\20\264\2\0"+
    "\3\264\26\0\21\264\1\271\11\264\2\0\3\264\26\0"+
    "\10\264\1\272\22\264\2\0\3\264\26\0\1\271\32\264"+
    "\2\0\3\264\26\0\11\264\1\273\21\264\2\0\3\264"+
    "\26\0\16\264\1\271\14\264\2\0\3\264\26\0\17\264"+
    "\1\274\13\264\2\0\3\264\26\0\12\264\1\275\20\264"+
    "\2\0\3\264\26\0\10\264\1\276\22\264\2\0\3\277"+
    "\26\0\33\277\41\0\1\300\54\0\1\6\37\0\3\277"+
    "\26\0\12\277\1\301\20\277\2\0\3\277\26\0\1\277"+
    "\1\302\31\277\2\0\3\277\26\0\11\277\1\301\21\277"+
    "\2\0\3\277\26\0\21\277\1\301\11\277\2\0\3\277"+
    "\26\0\11\277\1\303\21\277\2\0\3\277\26\0\26\277"+
    "\1\304\4\277\2\0\3\277\26\0\27\277\1\301\3\277"+
    "\2\0\3\305\26\0\33\305\40\0\1\306\27\0\3\305"+
    "\26\0\11\305\1\307\21\305\2\0\3\305\26\0\21\305"+
    "\1\307\11\305\2\0\3\305\26\0\13\305\1\310\17\305"+
    "\2\0\3\311\26\0\33\311\40\0\1\312\27\0\3\311"+
    "\26\0\1\313\32\311\2\0\3\314\26\0\33\314\43\0"+
    "\1\315\24\0\3\316\26\0\33\316\44\0\1\317\23\0"+
    "\3\320\26\0\33\320\45\0\1\321\22\0\3\322\26\0"+
    "\33\322\2\0\3\323\26\0\33\323\2\0\3\324\26\0"+
    "\33\324\2\0\3\325\26\0\33\325\2\0\3\326\26\0"+
    "\33\326\2\0\3\327\26\0\33\327\2\0\3\330\26\0"+
    "\33\330\2\0\3\331\26\0\33\331\2\0\3\332\26\0"+
    "\33\332\2\0\3\333\26\0\33\333\2\0\3\334\26\0"+
    "\33\334\2\0\3\335\26\0\33\335\2\0\3\336\26\0"+
    "\33\336\2\0\3\337\26\0\33\337\2\0\3\340\26\0"+
    "\33\340\2\0\3\341\26\0\33\341\2\0\3\342\26\0"+
    "\33\342\2\0\3\343\26\0\33\343\2\0\3\344\26\0"+
    "\33\344\2\0\3\345\26\0\33\345\2\0\3\346\26\0"+
    "\33\346\2\0\3\347\26\0\33\347\2\0\3\350\26\0"+
    "\33\350\2\0\3\351\26\0\33\351\2\0\3\352\26\0"+
    "\33\352\2\0\3\353\26\0\33\353\2\0\3\354\26\0"+
    "\33\354\2\0\3\355\26\0\33\355\2\0\3\356\26\0"+
    "\33\356\2\0\3\357\26\0\33\357\2\0\3\360\26\0"+
    "\33\360\2\0\3\361\26\0\33\361\2\0\3\362\26\0"+
    "\33\362\2\0\3\363\26\0\33\363\2\0\3\364\26\0"+
    "\33\364\2\0\3\365\26\0\33\365\2\0\3\366\26\0"+
    "\33\366\2\0\3\367\26\0\33\367\2\0\3\370\26\0"+
    "\33\370\2\0\3\371\26\0\33\371\2\0\3\372\26\0"+
    "\33\372\2\0\3\373\26\0\33\373\2\0\3\374\26\0"+
    "\33\374\2\0\3\375\26\0\33\375\2\0\3\376\26\0"+
    "\33\376\2\0\3\377\26\0\33\377\2\0\3\u0100\26\0"+
    "\33\u0100\2\0\3\u0101\26\0\33\u0101\2\0\3\u0102\26\0"+
    "\33\u0102\2\0\3\u0103\26\0\33\u0103\2\0\3\u0104\26\0"+
    "\33\u0104\2\0\3\u0105\26\0\33\u0105\2\0\3\u0106\26\0"+
    "\33\u0106\2\0\3\u0107\26\0\33\u0107\2\0\3\u0108\26\0"+
    "\33\u0108\2\0\3\u0109\26\0\33\u0109\2\0\3\u010a\26\0"+
    "\33\u010a\2\0\3\u010b\26\0\33\u010b\2\0\3\u010c\26\0"+
    "\33\u010c\2\0\3\u010d\26\0\33\u010d\2\0\3\u010e\26\0"+
    "\33\u010e\2\0\3\u010f\26\0\33\u010f\2\0\3\u0110\26\0"+
    "\33\u0110\2\0\3\u0111\26\0\33\u0111\2\0\3\u0112\26\0"+
    "\33\u0112\2\0\3\u0113\26\0\33\u0113\2\0\3\u0114\26\0"+
    "\33\u0114\2\0\3\u0115\26\0\33\u0115\2\0\3\u0116\26\0"+
    "\33\u0116\2\0\3\u0117\26\0\33\u0117\2\0\3\u0118\26\0"+
    "\33\u0118\2\0\3\u0119\26\0\33\u0119\2\0\3\u011a\26\0"+
    "\33\u011a\2\0\3\u011b\26\0\33\u011b\2\0\3\u011c\26\0"+
    "\33\u011c\2\0\3\u011d\26\0\33\u011d\2\0\3\u011e\26\0"+
    "\33\u011e\2\0\3\u011f\26\0\33\u011f\2\0\3\u0120\26\0"+
    "\33\u0120\2\0\3\u0121\26\0\33\u0121\2\0\3\u0122\26\0"+
    "\33\u0122\2\0\3\u0123\26\0\33\u0123\2\0\3\u0124\26\0"+
    "\33\u0124\2\0\3\u0125\26\0\33\u0125\2\0\3\u0126\26\0"+
    "\33\u0126\2\0\3\u0127\26\0\33\u0127\2\0\3\u0128\26\0"+
    "\33\u0128\2\0\3\u0129\26\0\33\u0129\2\0\3\u012a\26\0"+
    "\33\u012a\2\0\3\u012b\26\0\33\u012b\2\0\3\u012c\26\0"+
    "\33\u012c\2\0\3\u012d\26\0\33\u012d\2\0\3\u012e\26\0"+
    "\33\u012e\2\0\3\u012f\26\0\33\u012f\2\0\3\u0130\26\0"+
    "\33\u0130\2\0\3\u0131\26\0\33\u0131\2\0\3\u0132\26\0"+
    "\33\u0132\2\0\3\u0133\26\0\33\u0133\2\0\3\u0134\26\0"+
    "\33\u0134\2\0\3\u0135\26\0\33\u0135\2\0\3\u0136\26\0"+
    "\33\u0136\2\0\3\u0137\26\0\33\u0137\2\0\3\u0138\26\0"+
    "\33\u0138\2\0\3\u0139\26\0\33\u0139\2\0\3\u013a\26\0"+
    "\33\u013a\2\0\3\u013b\26\0\33\u013b\2\0\3\u013c\26\0"+
    "\33\u013c\2\0\3\u013d\26\0\33\u013d\2\0\3\u013e\26\0"+
    "\33\u013e\2\0\3\u013f\26\0\33\u013f\2\0\3\u0140\26\0"+
    "\33\u0140\2\0\3\u0141\26\0\33\u0141\2\0\3\u0142\26\0"+
    "\33\u0142\2\0\3\u0143\26\0\33\u0143\2\0\3\u0144\26\0"+
    "\33\u0144\2\0\3\u0145\26\0\33\u0145\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15822];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\7\1\2\11\1\1\1\11"+
    "\1\1\2\11\33\1\1\0\5\11\1\1\1\11\5\0"+
    "\1\1\1\11\1\1\1\11\40\1\1\0\1\11\4\1"+
    "\1\0\2\1\4\0\1\11\1\0\1\11\34\1\1\0"+
    "\1\1\2\0\1\11\1\0\23\1\2\0\15\1\2\0"+
    "\11\1\1\0\5\1\1\0\3\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\11\163\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int line;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); line=yyline; return ERROR;
            }
          case 32: break;
          case 2: 
            { lexeme=yytext(); line=yyline; return LITERAL_NUM_ENTERO;
            }
          case 33: break;
          case 3: 
            { /*No se procesa*/
            }
          case 34: break;
          case 4: 
            { lexeme=yytext(); line=yyline; return OPERADOR_MULTIPLICACION;
            }
          case 35: break;
          case 5: 
            { lexeme=yytext(); line=yyline; return OPERADOR_ADICION;
            }
          case 36: break;
          case 6: 
            { lexeme=yytext(); line=yyline; return OPERADOR_SUSTRACCION;
            }
          case 37: break;
          case 7: 
            { lexeme=yytext(); line=yyline; return OPERADOR_DIVISION;
            }
          case 38: break;
          case 8: 
            { lexeme=yytext(); line=yyline; return OPERADOR_PARENTESIS_ABRIR;
            }
          case 39: break;
          case 9: 
            { lexeme=yytext(); line=yyline; return OPERADOR_PARENTESIS_CERRAR;
            }
          case 40: break;
          case 10: 
            { lexeme=yytext(); line=yyline; return OPERADOR_ASIGNACION;
            }
          case 41: break;
          case 11: 
            { lexeme=yytext(); line=yyline; return OPERADOR;
            }
          case 42: break;
          case 12: 
            { lexeme=yytext(); line=yyline; return OPERADOR_CORCHETE_ABRIR;
            }
          case 43: break;
          case 13: 
            { lexeme=yytext(); line=yyline; return OPERADOR_CORCHETE_CERRAR;
            }
          case 44: break;
          case 14: 
            { lexeme=yytext(); line=yyline; return OPERADOR_MENOR_QUE;
            }
          case 45: break;
          case 15: 
            { lexeme=yytext(); line=yyline; return OPERADOR_MAYOR_QUE;
            }
          case 46: break;
          case 16: 
            { lexeme=yytext(); line=yyline; return IDENTIFICADOR;
            }
          case 47: break;
          case 17: 
            { lexeme=yytext(); line=yyline; return OPERADOR_ASIGNACION_MULTIPLICACION;
            }
          case 48: break;
          case 18: 
            { lexeme=yytext(); line=yyline; return OPERADOR_INCREMENTO;
            }
          case 49: break;
          case 19: 
            { lexeme=yytext(); line=yyline; return OPERADOR_ASIGNACION_ADICION;
            }
          case 50: break;
          case 20: 
            { lexeme=yytext(); line=yyline; return OPERADOR_DISMINUCION;
            }
          case 51: break;
          case 21: 
            { lexeme=yytext(); line=yyline; return OPERADOR_ASIGNACION_SUSTRACCION;
            }
          case 52: break;
          case 22: 
            { lexeme=yytext(); line=yyline; return OPERADOR_ASIGNACION_DIVISION;
            }
          case 53: break;
          case 23: 
            { lexeme=yytext(); line=yyline; return OPERADOR_MENOR_IGUAL_QUE;
            }
          case 54: break;
          case 24: 
            { lexeme=yytext(); line=yyline; return OPERADOR_DESPLAZAMIENTO_IZQUIERDA;
            }
          case 55: break;
          case 25: 
            { lexeme=yytext(); line=yyline; return OPERADOR_MAYOR_IGUAL_QUE;
            }
          case 56: break;
          case 26: 
            { lexeme=yytext(); line=yyline; return OPERADOR_DESPLAZAMIENTO_DERECHA;
            }
          case 57: break;
          case 27: 
            { lexeme=yytext(); line=yyline; return PALABRA_RESERVADA;
            }
          case 58: break;
          case 28: 
            { lexeme=yytext(); line=yyline; return LITERAL_STRING;
            }
          case 59: break;
          case 29: 
            { lexeme=yytext(); line=yyline; return LITERAL_NUM_FLOTANTE;
            }
          case 60: break;
          case 30: 
            { lexeme=yytext(); line=yyline; return OPERADOR_ASIGNACION_DESPLAZAMIENTO_DERECHA;
            }
          case 61: break;
          case 31: 
            { lexeme=yytext(); line=yyline; return OPERADOR_ASIGNACION_DESPLAZAMIENTO_IZQUIERDA;
            }
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
